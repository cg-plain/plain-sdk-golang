// Code generated by gqlclientgen - DO NOT EDIT

package plain

import (
	"context"
	"encoding/json"
	"fmt"
	gqlclient "git.sr.ht/~emersion/gqlclient"
)

type AcceptWorkspaceInviteInput struct {
	InviteId string `json:"inviteId"`
}

type AcceptWorkspaceInviteOutput struct {
	Invite *WorkspaceInvite `json:"invite,omitempty"`
	Error  *MutationError   `json:"error,omitempty"`
}

type Actor struct {
	// Underlying value of the GraphQL union
	Value ActorValue `json:"-"`
}

func (base *Actor) UnmarshalJSON(b []byte) error {
	type Raw Actor
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "UserActor":
		base.Value = new(UserActor)
	case "CustomerActor":
		base.Value = new(CustomerActor)
	case "DeletedCustomerActor":
		base.Value = new(DeletedCustomerActor)
	case "SystemActor":
		base.Value = new(SystemActor)
	case "MachineUserActor":
		base.Value = new(MachineUserActor)
	case "":
		return fmt.Errorf("gqlclient: union Actor: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union Actor: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// ActorValue is one of: UserActor | CustomerActor | DeletedCustomerActor | SystemActor | MachineUserActor
type ActorValue interface {
	isActor()
}

type AddCustomerToCustomerGroupsInput struct {
	CustomerId               string                    `json:"customerId"`
	CustomerGroupIdentifiers []CustomerGroupIdentifier `json:"customerGroupIdentifiers"`
}

type AddCustomerToCustomerGroupsOutput struct {
	CustomerGroupMemberships []CustomerGroupMembership `json:"customerGroupMemberships,omitempty"`
	Error                    *MutationError            `json:"error,omitempty"`
}

type ApiKey struct {
	Id          string        `json:"id"`
	Description *string       `json:"description,omitempty"`
	Permissions []string      `json:"permissions"`
	CreatedBy   InternalActor `json:"createdBy"`
	CreatedAt   *DateTime     `json:"createdAt"`
	UpdatedBy   InternalActor `json:"updatedBy"`
	UpdatedAt   *DateTime     `json:"updatedAt"`
	IsDeleted   bool          `json:"isDeleted"`
	DeletedAt   *DateTime     `json:"deletedAt,omitempty"`
	DeletedBy   *Actor        `json:"deletedBy,omitempty"`
}

type ApiKeyConnection struct {
	Edges    []ApiKeyEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type ApiKeyEdge struct {
	Cursor string  `json:"cursor"`
	Node   *ApiKey `json:"node"`
}

type ArchiveIssueTypeInput struct {
	IssueTypeId string `json:"issueTypeId"`
}

type ArchiveIssueTypeOutput struct {
	IssueType *IssueType     `json:"issueType,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type AssignCustomerToUserInput struct {
	CustomerId string `json:"customerId"`
	UserId     string `json:"userId,omitempty"`
	// Should the mutation change the customer's status to Active.
	//
	// Defaults to true.
	ChangeCustomerStatusToActive *bool `json:"changeCustomerStatusToActive,omitempty"`
}

type AssignCustomerToUserOutput struct {
	Customer *Customer      `json:"customer,omitempty"`
	Error    *MutationError `json:"error,omitempty"`
}

type AssignRolesToUserInput struct {
	UserId  string   `json:"userId"`
	RoleIds []string `json:"roleIds"`
}

type AssignRolesToUserOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type Attachment struct {
	Id            string         `json:"id"`
	FileName      string         `json:"fileName"`
	FileSize      *FileSize      `json:"fileSize"`
	FileExtension *string        `json:"fileExtension,omitempty"`
	FileMimeType  string         `json:"fileMimeType"`
	Type          AttachmentType `json:"type"`
	CreatedAt     *DateTime      `json:"createdAt"`
	CreatedBy     Actor          `json:"createdBy"`
	UpdatedAt     *DateTime      `json:"updatedAt"`
	UpdatedBy     Actor          `json:"updatedBy"`
}

type AttachmentDownloadUrl struct {
	Attachment  *Attachment `json:"attachment"`
	DownloadUrl string      `json:"downloadUrl"`
	ExpiresAt   *DateTime   `json:"expiresAt"`
}

type AttachmentType string

const (
	AttachmentTypeEmail               AttachmentType = "EMAIL"
	AttachmentTypeCustomTimelineEntry AttachmentType = "CUSTOM_TIMELINE_ENTRY"
	AttachmentTypeChat                AttachmentType = "CHAT"
)

type AttachmentUploadUrl struct {
	Attachment     *Attachment      `json:"attachment"`
	UploadFormUrl  string           `json:"uploadFormUrl"`
	UploadFormData []UploadFormData `json:"uploadFormData"`
	ExpiresAt      *DateTime        `json:"expiresAt"`
}

type BooleanInput struct {
	Value bool `json:"value"`
}

// A boolean setting
type BooleanSetting struct {
	// The setting code, for a full list of codes, please see: https://docs.plain.com/advanced/settings.
	Code string `json:"code"`
	// The value of the setting. This is named uniquely (instead of just `value`) so that the union has unique fields.
	BooleanValue bool `json:"booleanValue"`
	// The scope of the setting.
	Scope *SettingScope `json:"scope"`
}

func (*BooleanSetting) isSetting() {}

type ChangeCustomerStatusAsyncInput struct {
	CustomerId string         `json:"customerId"`
	Status     CustomerStatus `json:"status"`
}

type ChangeCustomerStatusAsyncOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type ChangeCustomerStatusInput struct {
	CustomerId string         `json:"customerId"`
	Status     CustomerStatus `json:"status"`
}

type ChangeCustomerStatusOutput struct {
	Error    *MutationError `json:"error,omitempty"`
	Customer *Customer      `json:"customer,omitempty"`
}

type ChangeIssueIssueTypeInput struct {
	IssueId     string `json:"issueId"`
	IssueTypeId string `json:"issueTypeId"`
}

type ChangeIssueIssueTypeOutput struct {
	Issue *Issue         `json:"issue,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type ChangeIssuePriorityInput struct {
	IssueId       string `json:"issueId"`
	PriorityValue int32  `json:"priorityValue"`
}

type ChangeIssuePriorityOutput struct {
	Issue *Issue         `json:"issue,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type ChangeType string

const (
	ChangeTypeAdded   ChangeType = "ADDED"
	ChangeTypeUpdated ChangeType = "UPDATED"
	ChangeTypeRemoved ChangeType = "REMOVED"
)

type ChangeUserStatusInput struct {
	UserId string     `json:"userId"`
	Status UserStatus `json:"status"`
}

type ChangeUserStatusOutput struct {
	User  *User          `json:"user,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type Chat struct {
	Id             string       `json:"id"`
	Text           *string      `json:"text,omitempty"`
	CustomerReadAt *DateTime    `json:"customerReadAt,omitempty"`
	Attachments    []Attachment `json:"attachments"`
	CreatedAt      *DateTime    `json:"createdAt"`
	CreatedBy      Actor        `json:"createdBy"`
	UpdatedAt      *DateTime    `json:"updatedAt"`
	UpdatedBy      Actor        `json:"updatedBy"`
}

type ChatEntry struct {
	ChatId         string       `json:"chatId"`
	Text           *string      `json:"text,omitempty"`
	CustomerReadAt *DateTime    `json:"customerReadAt,omitempty"`
	Attachments    []Attachment `json:"attachments"`
}

func (*ChatEntry) isEntry() {}

type CommunicationChannel string

const (
	CommunicationChannelChat  CommunicationChannel = "CHAT"
	CommunicationChannelEmail CommunicationChannel = "EMAIL"
)

type CommunicationChannelInput string

const (
	CommunicationChannelInputChat  CommunicationChannelInput = "CHAT"
	CommunicationChannelInputEmail CommunicationChannelInput = "EMAIL"
	CommunicationChannelInputNone  CommunicationChannelInput = "NONE"
)

type ComponentBadge struct {
	BadgeLabel string               `json:"badgeLabel"`
	BadgeColor *ComponentBadgeColor `json:"badgeColor,omitempty"`
}

func (*ComponentBadge) isComponentContainerContent() {}

func (*ComponentBadge) isComponentRowContent() {}

func (*ComponentBadge) isCustomTimelineEntryComponent() {}

func (*ComponentBadge) isCustomerCardComponent() {}

type ComponentBadgeColor string

const (
	ComponentBadgeColorGrey   ComponentBadgeColor = "GREY"
	ComponentBadgeColorGreen  ComponentBadgeColor = "GREEN"
	ComponentBadgeColorYellow ComponentBadgeColor = "YELLOW"
	ComponentBadgeColorRed    ComponentBadgeColor = "RED"
	ComponentBadgeColorBlue   ComponentBadgeColor = "BLUE"
)

type ComponentBadgeInput struct {
	BadgeLabel string               `json:"badgeLabel"`
	BadgeColor *ComponentBadgeColor `json:"badgeColor,omitempty"`
}

type ComponentContainer struct {
	ContainerContent []ComponentContainerContent `json:"containerContent"`
}

func (*ComponentContainer) isCustomTimelineEntryComponent() {}

func (*ComponentContainer) isCustomerCardComponent() {}

type ComponentContainerContent struct {
	// Underlying value of the GraphQL union
	Value ComponentContainerContentValue `json:"-"`
}

func (base *ComponentContainerContent) UnmarshalJSON(b []byte) error {
	type Raw ComponentContainerContent
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "ComponentText":
		base.Value = new(ComponentText)
	case "ComponentPlainText":
		base.Value = new(ComponentPlainText)
	case "ComponentSpacer":
		base.Value = new(ComponentSpacer)
	case "ComponentDivider":
		base.Value = new(ComponentDivider)
	case "ComponentLinkButton":
		base.Value = new(ComponentLinkButton)
	case "ComponentBadge":
		base.Value = new(ComponentBadge)
	case "ComponentCopyButton":
		base.Value = new(ComponentCopyButton)
	case "ComponentRow":
		base.Value = new(ComponentRow)
	case "":
		return fmt.Errorf("gqlclient: union ComponentContainerContent: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union ComponentContainerContent: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// ComponentContainerContentValue is one of: ComponentText | ComponentPlainText | ComponentSpacer | ComponentDivider | ComponentLinkButton | ComponentBadge | ComponentCopyButton | ComponentRow
type ComponentContainerContentValue interface {
	isComponentContainerContent()
}

type ComponentContainerContentInput struct {
	ComponentText       *ComponentTextInput       `json:"componentText,omitempty"`
	ComponentPlainText  *ComponentPlainTextInput  `json:"componentPlainText,omitempty"`
	ComponentDivider    *ComponentDividerInput    `json:"componentDivider,omitempty"`
	ComponentLinkButton *ComponentLinkButtonInput `json:"componentLinkButton,omitempty"`
	ComponentSpacer     *ComponentSpacerInput     `json:"componentSpacer,omitempty"`
	ComponentBadge      *ComponentBadgeInput      `json:"componentBadge,omitempty"`
	ComponentCopyButton *ComponentCopyButtonInput `json:"componentCopyButton,omitempty"`
	ComponentRow        *ComponentRowInput        `json:"componentRow,omitempty"`
}

type ComponentContainerInput struct {
	ContainerContent []ComponentContainerContentInput `json:"containerContent"`
}

type ComponentCopyButton struct {
	CopyButtonValue        string  `json:"copyButtonValue"`
	CopyButtonTooltipLabel *string `json:"copyButtonTooltipLabel,omitempty"`
}

func (*ComponentCopyButton) isComponentContainerContent() {}

func (*ComponentCopyButton) isComponentRowContent() {}

func (*ComponentCopyButton) isCustomTimelineEntryComponent() {}

func (*ComponentCopyButton) isCustomerCardComponent() {}

type ComponentCopyButtonInput struct {
	CopyButtonValue        string  `json:"copyButtonValue"`
	CopyButtonTooltipLabel *string `json:"copyButtonTooltipLabel,omitempty"`
}

type ComponentDivider struct {
	DividerSpacingSize *ComponentDividerSpacingSize `json:"dividerSpacingSize,omitempty"`
	SpacingSize        *ComponentDividerSpacingSize `json:"spacingSize,omitempty"`
}

func (*ComponentDivider) isComponentContainerContent() {}

func (*ComponentDivider) isComponentRowContent() {}

func (*ComponentDivider) isCustomTimelineEntryComponent() {}

func (*ComponentDivider) isCustomerCardComponent() {}

type ComponentDividerInput struct {
	DividerSpacingSize *ComponentDividerSpacingSize `json:"dividerSpacingSize,omitempty"`
	SpacingSize        *ComponentDividerSpacingSize `json:"spacingSize,omitempty"`
}

type ComponentDividerSpacingSize string

const (
	ComponentDividerSpacingSizeXs ComponentDividerSpacingSize = "XS"
	ComponentDividerSpacingSizeS  ComponentDividerSpacingSize = "S"
	ComponentDividerSpacingSizeM  ComponentDividerSpacingSize = "M"
	ComponentDividerSpacingSizeL  ComponentDividerSpacingSize = "L"
	ComponentDividerSpacingSizeXl ComponentDividerSpacingSize = "XL"
)

type ComponentInput struct {
	ComponentText       *ComponentTextInput       `json:"componentText,omitempty"`
	ComponentPlainText  *ComponentPlainTextInput  `json:"componentPlainText,omitempty"`
	ComponentDivider    *ComponentDividerInput    `json:"componentDivider,omitempty"`
	ComponentLinkButton *ComponentLinkButtonInput `json:"componentLinkButton,omitempty"`
	ComponentSpacer     *ComponentSpacerInput     `json:"componentSpacer,omitempty"`
	ComponentBadge      *ComponentBadgeInput      `json:"componentBadge,omitempty"`
	ComponentCopyButton *ComponentCopyButtonInput `json:"componentCopyButton,omitempty"`
	ComponentRow        *ComponentRowInput        `json:"componentRow,omitempty"`
	ComponentContainer  *ComponentContainerInput  `json:"componentContainer,omitempty"`
}

type ComponentLinkButton struct {
	LinkButtonUrl   string `json:"linkButtonUrl"`
	LinkButtonLabel string `json:"linkButtonLabel"`
	Url             string `json:"url"`
	Label           string `json:"label"`
}

func (*ComponentLinkButton) isComponentContainerContent() {}

func (*ComponentLinkButton) isComponentRowContent() {}

func (*ComponentLinkButton) isCustomTimelineEntryComponent() {}

func (*ComponentLinkButton) isCustomerCardComponent() {}

type ComponentLinkButtonInput struct {
	// Required input, will be made required after deprecated fields are removed.
	LinkButtonUrl *string `json:"linkButtonUrl,omitempty"`
	// Required input, will be made required after deprecated fields are removed.
	LinkButtonLabel *string `json:"linkButtonLabel,omitempty"`
	Url             *string `json:"url,omitempty"`
	Label           *string `json:"label,omitempty"`
}

type ComponentPlainText struct {
	PlainTextSize  *ComponentPlainTextSize  `json:"plainTextSize,omitempty"`
	PlainTextColor *ComponentPlainTextColor `json:"plainTextColor,omitempty"`
	PlainText      string                   `json:"plainText"`
}

func (*ComponentPlainText) isComponentContainerContent() {}

func (*ComponentPlainText) isComponentRowContent() {}

func (*ComponentPlainText) isCustomTimelineEntryComponent() {}

func (*ComponentPlainText) isCustomerCardComponent() {}

type ComponentPlainTextColor string

const (
	ComponentPlainTextColorNormal  ComponentPlainTextColor = "NORMAL"
	ComponentPlainTextColorMuted   ComponentPlainTextColor = "MUTED"
	ComponentPlainTextColorSuccess ComponentPlainTextColor = "SUCCESS"
	ComponentPlainTextColorWarning ComponentPlainTextColor = "WARNING"
	ComponentPlainTextColorError   ComponentPlainTextColor = "ERROR"
)

type ComponentPlainTextInput struct {
	PlainTextSize  *ComponentPlainTextSize  `json:"plainTextSize,omitempty"`
	PlainTextColor *ComponentPlainTextColor `json:"plainTextColor,omitempty"`
	PlainText      string                   `json:"plainText"`
}

type ComponentPlainTextSize string

const (
	ComponentPlainTextSizeS ComponentPlainTextSize = "S"
	ComponentPlainTextSizeM ComponentPlainTextSize = "M"
	ComponentPlainTextSizeL ComponentPlainTextSize = "L"
)

type ComponentRow struct {
	RowMainContent  []ComponentRowContent `json:"rowMainContent"`
	RowAsideContent []ComponentRowContent `json:"rowAsideContent"`
}

func (*ComponentRow) isComponentContainerContent() {}

func (*ComponentRow) isCustomTimelineEntryComponent() {}

func (*ComponentRow) isCustomerCardComponent() {}

type ComponentRowContent struct {
	// Underlying value of the GraphQL union
	Value ComponentRowContentValue `json:"-"`
}

func (base *ComponentRowContent) UnmarshalJSON(b []byte) error {
	type Raw ComponentRowContent
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "ComponentText":
		base.Value = new(ComponentText)
	case "ComponentPlainText":
		base.Value = new(ComponentPlainText)
	case "ComponentSpacer":
		base.Value = new(ComponentSpacer)
	case "ComponentDivider":
		base.Value = new(ComponentDivider)
	case "ComponentLinkButton":
		base.Value = new(ComponentLinkButton)
	case "ComponentBadge":
		base.Value = new(ComponentBadge)
	case "ComponentCopyButton":
		base.Value = new(ComponentCopyButton)
	case "":
		return fmt.Errorf("gqlclient: union ComponentRowContent: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union ComponentRowContent: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// ComponentRowContentValue is one of: ComponentText | ComponentPlainText | ComponentSpacer | ComponentDivider | ComponentLinkButton | ComponentBadge | ComponentCopyButton
type ComponentRowContentValue interface {
	isComponentRowContent()
}

type ComponentRowContentInput struct {
	ComponentText       *ComponentTextInput       `json:"componentText,omitempty"`
	ComponentPlainText  *ComponentPlainTextInput  `json:"componentPlainText,omitempty"`
	ComponentDivider    *ComponentDividerInput    `json:"componentDivider,omitempty"`
	ComponentLinkButton *ComponentLinkButtonInput `json:"componentLinkButton,omitempty"`
	ComponentSpacer     *ComponentSpacerInput     `json:"componentSpacer,omitempty"`
	ComponentBadge      *ComponentBadgeInput      `json:"componentBadge,omitempty"`
	ComponentCopyButton *ComponentCopyButtonInput `json:"componentCopyButton,omitempty"`
}

type ComponentRowInput struct {
	RowMainContent  []ComponentRowContentInput `json:"rowMainContent"`
	RowAsideContent []ComponentRowContentInput `json:"rowAsideContent"`
}

type ComponentSpacer struct {
	SpacerSize ComponentSpacerSize `json:"spacerSize"`
	Size       ComponentSpacerSize `json:"size"`
}

func (*ComponentSpacer) isComponentContainerContent() {}

func (*ComponentSpacer) isComponentRowContent() {}

func (*ComponentSpacer) isCustomTimelineEntryComponent() {}

func (*ComponentSpacer) isCustomerCardComponent() {}

type ComponentSpacerInput struct {
	// Required input, will be made required after deprecated fields are removed.
	SpacerSize *ComponentSpacerSize `json:"spacerSize,omitempty"`
	Size       *ComponentSpacerSize `json:"size,omitempty"`
}

type ComponentSpacerSize string

const (
	ComponentSpacerSizeXs ComponentSpacerSize = "XS"
	ComponentSpacerSizeS  ComponentSpacerSize = "S"
	ComponentSpacerSizeM  ComponentSpacerSize = "M"
	ComponentSpacerSizeL  ComponentSpacerSize = "L"
	ComponentSpacerSizeXl ComponentSpacerSize = "XL"
)

type ComponentText struct {
	TextSize  *ComponentTextSize  `json:"textSize,omitempty"`
	TextColor *ComponentTextColor `json:"textColor,omitempty"`
	Text      string              `json:"text"`
	Color     *ComponentTextColor `json:"color,omitempty"`
	Size      *ComponentTextSize  `json:"size,omitempty"`
}

func (*ComponentText) isComponentContainerContent() {}

func (*ComponentText) isComponentRowContent() {}

func (*ComponentText) isCustomTimelineEntryComponent() {}

func (*ComponentText) isCustomerCardComponent() {}

type ComponentTextColor string

const (
	ComponentTextColorNormal  ComponentTextColor = "NORMAL"
	ComponentTextColorMuted   ComponentTextColor = "MUTED"
	ComponentTextColorSuccess ComponentTextColor = "SUCCESS"
	ComponentTextColorWarning ComponentTextColor = "WARNING"
	ComponentTextColorError   ComponentTextColor = "ERROR"
)

type ComponentTextInput struct {
	TextSize  *ComponentTextSize  `json:"textSize,omitempty"`
	TextColor *ComponentTextColor `json:"textColor,omitempty"`
	Text      string              `json:"text"`
	Color     *ComponentTextColor `json:"color,omitempty"`
	Size      *ComponentTextSize  `json:"size,omitempty"`
}

type ComponentTextSize string

const (
	ComponentTextSizeS ComponentTextSize = "S"
	ComponentTextSizeM ComponentTextSize = "M"
	ComponentTextSizeL ComponentTextSize = "L"
)

type CreateApiKeyInput struct {
	MachineUserId string   `json:"machineUserId"`
	Description   *string  `json:"description,omitempty"`
	Permissions   []string `json:"permissions"`
}

type CreateApiKeyOutput struct {
	ApiKey       *ApiKey        `json:"apiKey,omitempty"`
	ApiKeySecret *string        `json:"apiKeySecret,omitempty"`
	Error        *MutationError `json:"error,omitempty"`
}

type CreateAttachmentDownloadUrlInput struct {
	AttachmentId string `json:"attachmentId"`
}

type CreateAttachmentDownloadUrlOutput struct {
	AttachmentDownloadUrl *AttachmentDownloadUrl `json:"attachmentDownloadUrl,omitempty"`
	Error                 *MutationError         `json:"error,omitempty"`
}

type CreateAttachmentUploadUrlInput struct {
	CustomerId     string         `json:"customerId"`
	FileName       string         `json:"fileName"`
	FileSizeBytes  int32          `json:"fileSizeBytes"`
	AttachmentType AttachmentType `json:"attachmentType"`
}

type CreateAttachmentUploadUrlOutput struct {
	AttachmentUploadUrl *AttachmentUploadUrl `json:"attachmentUploadUrl,omitempty"`
	Error               *MutationError       `json:"error,omitempty"`
}

// Input type to create a new customer card config.
//
// By default new customer cards will have an ordering of 100000 (to place them at the bottom).
type CreateCustomerCardConfigInput struct {
	// The title of the card (max length: 500 characters).
	Title string `json:"title"`
	// The key of the card (must be unique in a workspace, max length: 500 characters, must match regex: `[a-zA-Z0-9_-]+`).
	Key string `json:"key"`
	// The default time the card should be cached for if no TTL is provided in the card response. (minimum: 15 seconds, maximum: 1 year or  31,536,000 seconds).
	DefaultTimeToLiveSeconds int32 `json:"defaultTimeToLiveSeconds"`
	// The URL from which this card should be loaded (must start with `https://` and be a valid URL, max length: 600 characters).
	ApiUrl string `json:"apiUrl"`
	// An array of headers name-value pairs (maximum length of array: 20).
	ApiHeaders []CustomerCardConfigApiHeaderInput `json:"apiHeaders"`
}

type CreateCustomerCardConfigOutput struct {
	// The created customer card config.
	CustomerCardConfig *CustomerCardConfig `json:"customerCardConfig,omitempty"`
	Error              *MutationError      `json:"error,omitempty"`
}

type CreateCustomerGroupInput struct {
	Name  string `json:"name"`
	Key   string `json:"key"`
	Color string `json:"color"`
}

type CreateCustomerGroupOutput struct {
	CustomerGroup *CustomerGroup `json:"customerGroup,omitempty"`
	Error         *MutationError `json:"error,omitempty"`
}

type CreateIssueInput struct {
	IssueTypeId string `json:"issueTypeId"`
	CustomerId  string `json:"customerId"`
	// The priority value for this issue. Overrides the issue's issue type's default priority value.
	//
	// Valid values are 0, 1, 2 and 3.
	PriorityValue *int32 `json:"priorityValue,omitempty"`
}

type CreateIssueLinkInput struct {
	IssueId     string                     `json:"issueId"`
	LinearIssue *LinearIssueIssueLinkInput `json:"linearIssue,omitempty"`
}

type CreateIssueLinkOutput struct {
	IssueLink *IssueLink     `json:"issueLink,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type CreateIssueOutput struct {
	Issue *Issue         `json:"issue,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type CreateIssueTypeInput struct {
	PublicName string `json:"publicName"`
	// The priority value for issues created with this issue type.
	//
	// Valid values are 0, 1, 2 and 3.
	DefaultIssuePriorityValue *int32 `json:"defaultIssuePriorityValue,omitempty"`
	// The icon to use for this issue type. The maximum length is 50 characters.
	//
	// Only lowercase alphanumeric characters, '-' and '_' are allowed.
	Icon *string `json:"icon,omitempty"`
}

type CreateIssueTypeOutput struct {
	IssueType *IssueType     `json:"issueType,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type CreateMachineUserInput struct {
	PublicName  string  `json:"publicName"`
	FullName    string  `json:"fullName"`
	Description *string `json:"description,omitempty"`
}

type CreateMachineUserOutput struct {
	MachineUser *MachineUser   `json:"machineUser,omitempty"`
	Error       *MutationError `json:"error,omitempty"`
}

type CreateMyLinearIntegrationInput struct {
	AuthCode    string `json:"authCode"`
	RedirectUrl string `json:"redirectUrl"`
}

type CreateMyLinearIntegrationOutput struct {
	Integration *UserLinearIntegration `json:"integration,omitempty"`
	Error       *MutationError         `json:"error,omitempty"`
}

type CreateMySlackIntegrationInput struct {
	AuthCode    string `json:"authCode"`
	RedirectUrl string `json:"redirectUrl"`
}

type CreateMySlackIntegrationOutput struct {
	Integration *UserSlackIntegration `json:"integration,omitempty"`
	Error       *MutationError        `json:"error,omitempty"`
}

type CreateNoteInput struct {
	CustomerId string `json:"customerId"`
	Text       string `json:"text"`
}

type CreateNoteOutput struct {
	Note  *Note          `json:"note,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type CreateSnippetInput struct {
	Name string `json:"name"`
	Text string `json:"text"`
}

type CreateSnippetOutput struct {
	Snippet *Snippet       `json:"snippet,omitempty"`
	Error   *MutationError `json:"error,omitempty"`
}

type CreateUserAccountInput struct {
	FullName   string `json:"fullName"`
	PublicName string `json:"publicName"`
}

type CreateUserAccountOutput struct {
	UserAccount *UserAccount   `json:"userAccount,omitempty"`
	Error       *MutationError `json:"error,omitempty"`
}

type CreateWebhookTargetInput struct {
	Url                string                                `json:"url"`
	EventSubscriptions []WebhookTargetEventSubscriptionInput `json:"eventSubscriptions"`
	IsEnabled          bool                                  `json:"isEnabled"`
	Description        string                                `json:"description"`
}

type CreateWebhookTargetOutput struct {
	WebhookTarget *WebhookTarget `json:"webhookTarget,omitempty"`
	Error         *MutationError `json:"error,omitempty"`
}

type CreateWorkspaceAppInput struct {
	Name       string `json:"name"`
	PublicName string `json:"publicName"`
}

type CreateWorkspaceAppOutput struct {
	WorkspaceApp *WorkspaceApp  `json:"workspaceApp,omitempty"`
	Error        *MutationError `json:"error,omitempty"`
}

type CreateWorkspaceAppPublicKeyInput struct {
	WorkspaceAppId string `json:"workspaceAppId"`
	Name           string `json:"name"`
	Value          string `json:"value"`
}

type CreateWorkspaceAppPublicKeyOutput struct {
	WorkspaceAppPublicKey *WorkspaceAppPublicKey `json:"workspaceAppPublicKey,omitempty"`
	Error                 *MutationError         `json:"error,omitempty"`
}

type CreateWorkspaceDiscordIntegrationInput struct {
	Name       string `json:"name"`
	WebhookUrl string `json:"webhookUrl"`
}

type CreateWorkspaceDiscordIntegrationOutput struct {
	Integration *WorkspaceDiscordIntegration `json:"integration,omitempty"`
	Error       *MutationError               `json:"error,omitempty"`
}

type CreateWorkspaceEmailDomainSettingsInput struct {
	SupportEmailAddress string `json:"supportEmailAddress"`
}

type CreateWorkspaceEmailDomainSettingsOutput struct {
	WorkspaceEmailDomainSettings *WorkspaceEmailDomainSettings `json:"workspaceEmailDomainSettings,omitempty"`
	Error                        *MutationError                `json:"error,omitempty"`
}

type CreateWorkspaceInput struct {
	Name       string `json:"name"`
	PublicName string `json:"publicName"`
}

type CreateWorkspaceOutput struct {
	Workspace *Workspace     `json:"workspace,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type CreateWorkspaceSlackIntegrationInput struct {
	AuthCode    string `json:"authCode"`
	RedirectUrl string `json:"redirectUrl"`
}

type CreateWorkspaceSlackIntegrationOutput struct {
	Integration *WorkspaceSlackIntegration `json:"integration,omitempty"`
	Error       *MutationError             `json:"error,omitempty"`
}

type CustomEntry struct {
	ExternalId  string                         `json:"externalId,omitempty"`
	Title       string                         `json:"title"`
	Type        *string                        `json:"type,omitempty"`
	Components  []CustomTimelineEntryComponent `json:"components"`
	Attachments []Attachment                   `json:"attachments"`
}

func (*CustomEntry) isEntry() {}

type CustomTimelineEntryComponent struct {
	// Underlying value of the GraphQL union
	Value CustomTimelineEntryComponentValue `json:"-"`
}

func (base *CustomTimelineEntryComponent) UnmarshalJSON(b []byte) error {
	type Raw CustomTimelineEntryComponent
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "ComponentText":
		base.Value = new(ComponentText)
	case "ComponentPlainText":
		base.Value = new(ComponentPlainText)
	case "ComponentSpacer":
		base.Value = new(ComponentSpacer)
	case "ComponentDivider":
		base.Value = new(ComponentDivider)
	case "ComponentLinkButton":
		base.Value = new(ComponentLinkButton)
	case "ComponentRow":
		base.Value = new(ComponentRow)
	case "ComponentContainer":
		base.Value = new(ComponentContainer)
	case "ComponentBadge":
		base.Value = new(ComponentBadge)
	case "ComponentCopyButton":
		base.Value = new(ComponentCopyButton)
	case "":
		return fmt.Errorf("gqlclient: union CustomTimelineEntryComponent: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union CustomTimelineEntryComponent: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// CustomTimelineEntryComponentValue is one of: ComponentText | ComponentPlainText | ComponentSpacer | ComponentDivider | ComponentLinkButton | ComponentRow | ComponentContainer | ComponentBadge | ComponentCopyButton
type CustomTimelineEntryComponentValue interface {
	isCustomTimelineEntryComponent()
}

// The core customer entity. A customer only exists (ideally) once.
// Uniqueness is guaranteed on both of these fields:
// 1. `externalId` if provided
// 2. `email`
type Customer struct {
	// Uniquely identifies a customer in Plain.
	Id string `json:"id"`
	// Your system's ID for this customer.
	ExternalId string `json:"externalId,omitempty"`
	// The full name of the customer.
	FullName string `json:"fullName"`
	// An optional short name of the customer, typically their first name.
	ShortName *string `json:"shortName,omitempty"`
	// The customer's email address.
	Email *EmailAddress `json:"email"`
	// The customer's status.
	Status CustomerStatus `json:"status"`
	// When the customer's status was last changed.
	StatusChangedAt *DateTime `json:"statusChangedAt"`
	// The user the customer is assigned to.
	AssignedToUser *UserActor `json:"assignedToUser,omitempty"`
	// When the customer was assigned to a user.
	AssignedAt *DateTime `json:"assignedAt,omitempty"`
	// When the customer was last in the `IDLE` status.
	LastIdleAt *DateTime `json:"lastIdleAt,omitempty"`
	// Metadata about the customer's timeline. This is eventually consistent with the timeline.
	TimelineInfo *TimelineInfo `json:"timelineInfo"`
	// A subquery to fetch the customer's issues.
	Issues *IssueConnection `json:"issues"`
	// A subquery to fetch the customer's group memberships.
	CustomerGroupMemberships *CustomerGroupMembershipConnection `json:"customerGroupMemberships"`
	CreatedAt                *DateTime                          `json:"createdAt"`
	CreatedBy                Actor                              `json:"createdBy"`
	UpdatedAt                *DateTime                          `json:"updatedAt"`
	UpdatedBy                Actor                              `json:"updatedBy"`
	MarkedAsSpamAt           *DateTime                          `json:"markedAsSpamAt,omitempty"`
	MarkedAsSpamBy           *InternalActor                     `json:"markedAsSpamBy,omitempty"`
}

type CustomerActor struct {
	CustomerId string    `json:"customerId"`
	Customer   *Customer `json:"customer"`
}

func (*CustomerActor) isActor() {}

type CustomerAssignmentTransitionedEntry struct {
	PreviousUserId string `json:"previousUserId,omitempty"`
	PreviousUser   *User  `json:"previousUser,omitempty"`
	NextUserId     string `json:"nextUserId,omitempty"`
	NextUser       *User  `json:"nextUser,omitempty"`
}

func (*CustomerAssignmentTransitionedEntry) isEntry() {}

type CustomerCardComponent struct {
	// Underlying value of the GraphQL union
	Value CustomerCardComponentValue `json:"-"`
}

func (base *CustomerCardComponent) UnmarshalJSON(b []byte) error {
	type Raw CustomerCardComponent
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "ComponentText":
		base.Value = new(ComponentText)
	case "ComponentPlainText":
		base.Value = new(ComponentPlainText)
	case "ComponentSpacer":
		base.Value = new(ComponentSpacer)
	case "ComponentDivider":
		base.Value = new(ComponentDivider)
	case "ComponentLinkButton":
		base.Value = new(ComponentLinkButton)
	case "ComponentRow":
		base.Value = new(ComponentRow)
	case "ComponentContainer":
		base.Value = new(ComponentContainer)
	case "ComponentBadge":
		base.Value = new(ComponentBadge)
	case "ComponentCopyButton":
		base.Value = new(ComponentCopyButton)
	case "":
		return fmt.Errorf("gqlclient: union CustomerCardComponent: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union CustomerCardComponent: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// CustomerCardComponentValue is one of: ComponentText | ComponentPlainText | ComponentSpacer | ComponentDivider | ComponentLinkButton | ComponentRow | ComponentContainer | ComponentBadge | ComponentCopyButton
type CustomerCardComponentValue interface {
	isCustomerCardComponent()
}

// The configuration of a customer card that defines four important things:
//
// - The title of the card
// - The key of the card, which will be used in the request payload to the API URL
// - The order in which the cards should appear
// - Which API the card should be loaded from (and the required authentication headers)
//
// Configs that have the same API URL and API Headers will be loaded in batch. API header names are treated case insensitively.
//
// A maximum of 25 customer cards can be configured.
type CustomerCardConfig struct {
	// The ID of the customer card config.
	Id string `json:"id"`
	// The order in which this customer card config should be shown.
	//
	// Duplicate order numbers are allowed, in case the order is the same they will be sorted based on `id`. The minimum is 0 and the maximum is 100000.
	Order int32 `json:"order"`
	// The title of the card (max length: 500 characters).
	Title string `json:"title"`
	// The key of the card (must be unique in a workspace, max length: 500 characters, must match regex: `[a-zA-Z0-9_-]+`).
	Key string `json:"key"`
	// The default time the card should be cached for if no TTL is provided in the card response. (minimum: 15 seconds, maximum: 1 year or  31,536,000 seconds).
	DefaultTimeToLiveSeconds int32 `json:"defaultTimeToLiveSeconds"`
	// The URL from which this card should be loaded (must start with `https://` and be a valid URL, max length: 600 characters). Requires the `customerCardConfigApiDetails:read` permission.
	ApiUrl string `json:"apiUrl"`
	// An array of headers name-value pairs (maximum length of array: 20). Requires the `customerCardConfigApiDetails:read` permission.
	ApiHeaders []CustomerCardConfigApiHeader `json:"apiHeaders"`
	// Indicates if the customer card is enabled or not. Disabled customer card configs are not loaded or displayed for customers.
	IsEnabled bool          `json:"isEnabled"`
	CreatedAt *DateTime     `json:"createdAt"`
	CreatedBy InternalActor `json:"createdBy"`
	UpdatedAt *DateTime     `json:"updatedAt"`
	UpdatedBy InternalActor `json:"updatedBy"`
}

// An API header that will be sent to the configured API URL.
type CustomerCardConfigApiHeader struct {
	// The name of the header, trimmed and treated case insensitively for deduplication purposes (min length: 1, max length: 100). Not all header names are allowed.
	Name string `json:"name"`
	// The value of the header, treated case sensitively for deduplication purposes (min length: 1, max length: 500).
	Value string `json:"value"`
}

// An API header that will be sent to the configured API URL.
type CustomerCardConfigApiHeaderInput struct {
	// The name of the header, trimmed and treated case insensitively for deduplication purposes (min length: 1, max length: 100). Not all header names are allowed.
	Name string `json:"name"`
	// The value of the header, treated case sensitively for deduplication purposes (min length: 1, max length: 500).
	Value string `json:"value"`
}

type CustomerCardConfigOrderInput struct {
	// The ID of the customer card config to be reordered.
	CustomerCardConfigId string `json:"customerCardConfigId"`
	// The order the customer card config should have.
	Order int32 `json:"order"`
}

// A shared interface for all common properties customer card instances can have.
// A customer can only have one customer card instance for each customer card config at any point in time.
//
// Has 3 implementations:
// - `CustomerCardInstanceLoading`
// - `CustomerCardInstanceLoaded`
// - `CustomerCardInstanceError`
type CustomerCardInstance struct {
	// The ID of the customer card instance. A new ID is generated for each load.
	Id string `json:"id"`
	// The customer the instance is for.
	CustomerId string `json:"customerId"`
	// The customer card config this instance is for.
	CustomerCardConfig *CustomerCardConfig `json:"customerCardConfig"`
	CreatedAt          *DateTime           `json:"createdAt"`
	CreatedBy          Actor               `json:"createdBy"`
	UpdatedAt          *DateTime           `json:"updatedAt"`
	UpdatedBy          Actor               `json:"updatedBy"`

	// Underlying value of the GraphQL interface
	Value CustomerCardInstanceValue `json:"-"`
}

func (base *CustomerCardInstance) UnmarshalJSON(b []byte) error {
	type Raw CustomerCardInstance
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "CustomerCardInstanceLoading":
		base.Value = new(CustomerCardInstanceLoading)
	case "CustomerCardInstanceLoaded":
		base.Value = new(CustomerCardInstanceLoaded)
	case "CustomerCardInstanceError":
		base.Value = new(CustomerCardInstanceError)
	case "":
		return nil
	default:
		return fmt.Errorf("gqlclient: interface CustomerCardInstance: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// CustomerCardInstanceValue is one of: CustomerCardInstanceLoading | CustomerCardInstanceLoaded | CustomerCardInstanceError
type CustomerCardInstanceValue interface {
	isCustomerCardInstance()
}

type CustomerCardInstanceChange struct {
	ChangeType           ChangeType            `json:"changeType"`
	CustomerCardInstance *CustomerCardInstance `json:"customerCardInstance"`
}

func (*CustomerCardInstanceChange) isCustomerCardInstanceChangesResult() {}

type CustomerCardInstanceChangesResult struct {
	// Underlying value of the GraphQL union
	Value CustomerCardInstanceChangesResultValue `json:"-"`
}

func (base *CustomerCardInstanceChangesResult) UnmarshalJSON(b []byte) error {
	type Raw CustomerCardInstanceChangesResult
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "CustomerCardInstanceChange":
		base.Value = new(CustomerCardInstanceChange)
	case "SubscriptionAcknowledgement":
		base.Value = new(SubscriptionAcknowledgement)
	case "":
		return fmt.Errorf("gqlclient: union CustomerCardInstanceChangesResult: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union CustomerCardInstanceChangesResult: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// CustomerCardInstanceChangesResultValue is one of: CustomerCardInstanceChange | SubscriptionAcknowledgement
type CustomerCardInstanceChangesResultValue interface {
	isCustomerCardInstanceChangesResult()
}

type CustomerCardInstanceError struct {
	// The ID of the customer card instance. A new ID is generated for each load.
	Id string `json:"id"`
	// The customer the instance is for.
	CustomerId string `json:"customerId"`
	// The customer card config this instance is for.
	CustomerCardConfig *CustomerCardConfig `json:"customerCardConfig"`
	// The details of the customer card load error.
	ErrorDetail CustomerCardInstanceErrorDetail `json:"errorDetail"`
	CreatedAt   *DateTime                       `json:"createdAt"`
	CreatedBy   Actor                           `json:"createdBy"`
	UpdatedAt   *DateTime                       `json:"updatedAt"`
	UpdatedBy   Actor                           `json:"updatedBy"`
}

func (*CustomerCardInstanceError) isCustomerCardInstance() {}

// Details for the reasons why the customer card failed to load.
type CustomerCardInstanceErrorDetail struct {
	// Underlying value of the GraphQL union
	Value CustomerCardInstanceErrorDetailValue `json:"-"`
}

func (base *CustomerCardInstanceErrorDetail) UnmarshalJSON(b []byte) error {
	type Raw CustomerCardInstanceErrorDetail
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "CustomerCardInstanceMissingCardErrorDetail":
		base.Value = new(CustomerCardInstanceMissingCardErrorDetail)
	case "CustomerCardInstanceResponseBodyErrorDetail":
		base.Value = new(CustomerCardInstanceResponseBodyErrorDetail)
	case "CustomerCardInstanceStatusCodeErrorDetail":
		base.Value = new(CustomerCardInstanceStatusCodeErrorDetail)
	case "CustomerCardInstanceRequestErrorDetail":
		base.Value = new(CustomerCardInstanceRequestErrorDetail)
	case "CustomerCardInstanceUnknownErrorDetail":
		base.Value = new(CustomerCardInstanceUnknownErrorDetail)
	case "CustomerCardInstanceTimeoutErrorDetail":
		base.Value = new(CustomerCardInstanceTimeoutErrorDetail)
	case "":
		return fmt.Errorf("gqlclient: union CustomerCardInstanceErrorDetail: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union CustomerCardInstanceErrorDetail: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// CustomerCardInstanceErrorDetailValue is one of: CustomerCardInstanceMissingCardErrorDetail | CustomerCardInstanceResponseBodyErrorDetail | CustomerCardInstanceStatusCodeErrorDetail | CustomerCardInstanceRequestErrorDetail | CustomerCardInstanceUnknownErrorDetail | CustomerCardInstanceTimeoutErrorDetail
type CustomerCardInstanceErrorDetailValue interface {
	isCustomerCardInstanceErrorDetail()
}

// A loaded customer card.
type CustomerCardInstanceLoaded struct {
	// The ID of the customer card instance. A new ID is generated for each load.
	Id string `json:"id"`
	// The customer the instance is for.
	CustomerId string `json:"customerId"`
	// The customer card config this instance is for.
	CustomerCardConfig *CustomerCardConfig `json:"customerCardConfig"`
	// The list of components of the customer card. If this is null it means the customer card was returned on the API, but the components array was empty.
	Components []CustomerCardComponent `json:"components,omitempty"`
	// When the customer card was received from the API.
	LoadedAt  *DateTime `json:"loadedAt"`
	ExpiresAt *DateTime `json:"expiresAt"`
	CreatedAt *DateTime `json:"createdAt"`
	CreatedBy Actor     `json:"createdBy"`
	UpdatedAt *DateTime `json:"updatedAt"`
	UpdatedBy Actor     `json:"updatedBy"`
}

func (*CustomerCardInstanceLoaded) isCustomerCardInstance() {}

// A loading customer card. The createdAt timestamp indicates when the load was started.
// Will be updated to be a CustomerCardInstanceLoaded or CustomerCardInstanceError.
type CustomerCardInstanceLoading struct {
	// The ID of the customer card instance. A new ID is generated for each load.
	Id string `json:"id"`
	// The customer the instance is for.
	CustomerId string `json:"customerId"`
	// The customer card config this instance is for.
	CustomerCardConfig *CustomerCardConfig `json:"customerCardConfig"`
	CreatedAt          *DateTime           `json:"createdAt"`
	CreatedBy          Actor               `json:"createdBy"`
	UpdatedAt          *DateTime           `json:"updatedAt"`
	UpdatedBy          Actor               `json:"updatedBy"`
}

func (*CustomerCardInstanceLoading) isCustomerCardInstance() {}

// The configured API URL didn't return a requested card key.
type CustomerCardInstanceMissingCardErrorDetail struct {
	Message string `json:"message"`
	CardKey string `json:"cardKey"`
}

func (*CustomerCardInstanceMissingCardErrorDetail) isCustomerCardInstanceErrorDetail() {}

// Plain failed to make the request to the configured API URL.
type CustomerCardInstanceRequestErrorDetail struct {
	Message   string `json:"message"`
	ErrorCode string `json:"errorCode"`
}

func (*CustomerCardInstanceRequestErrorDetail) isCustomerCardInstanceErrorDetail() {}

// An invalid response body was returned from the configured API URL.
type CustomerCardInstanceResponseBodyErrorDetail struct {
	Message      string `json:"message"`
	ResponseBody string `json:"responseBody"`
}

func (*CustomerCardInstanceResponseBodyErrorDetail) isCustomerCardInstanceErrorDetail() {}

// A non-200 status code was returned from the configured API URL.
type CustomerCardInstanceStatusCodeErrorDetail struct {
	Message      string `json:"message"`
	StatusCode   int32  `json:"statusCode"`
	ResponseBody string `json:"responseBody"`
}

func (*CustomerCardInstanceStatusCodeErrorDetail) isCustomerCardInstanceErrorDetail() {}

// The card failed to load within the timeout.
type CustomerCardInstanceTimeoutErrorDetail struct {
	Message        string `json:"message"`
	TimeoutSeconds int32  `json:"timeoutSeconds"`
}

func (*CustomerCardInstanceTimeoutErrorDetail) isCustomerCardInstanceErrorDetail() {}

// An unknown error occurred. If this error is persistent, please contact our support.
type CustomerCardInstanceUnknownErrorDetail struct {
	Message string `json:"message"`
}

func (*CustomerCardInstanceUnknownErrorDetail) isCustomerCardInstanceErrorDetail() {}

type CustomerChange struct {
	ChangeType ChangeType `json:"changeType"`
	Customer   *Customer  `json:"customer"`
}

type CustomerChangesFilter struct {
	AssignedToUser []string `json:"assignedToUser,omitempty"`
}

type CustomerConnection struct {
	Edges      []CustomerEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int32          `json:"totalCount"`
}

type CustomerEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Customer `json:"node"`
}

type CustomerEmailActor struct {
	CustomerId string    `json:"customerId"`
	Customer   *Customer `json:"customer"`
}

func (*CustomerEmailActor) isEmailActor() {}

type CustomerGroup struct {
	Id        string        `json:"id"`
	Name      string        `json:"name"`
	Key       string        `json:"key"`
	Color     string        `json:"color"`
	CreatedAt *DateTime     `json:"createdAt"`
	CreatedBy InternalActor `json:"createdBy"`
	UpdatedAt *DateTime     `json:"updatedAt"`
	UpdatedBy InternalActor `json:"updatedBy"`
}

type CustomerGroupConnection struct {
	Edges    []CustomerGroupEdge `json:"edges"`
	PageInfo *PageInfo           `json:"pageInfo"`
}

type CustomerGroupEdge struct {
	Cursor string         `json:"cursor"`
	Node   *CustomerGroup `json:"node"`
}

type CustomerGroupIdentifier struct {
	CustomerGroupId  string  `json:"customerGroupId,omitempty"`
	CustomerGroupKey *string `json:"customerGroupKey,omitempty"`
}

type CustomerGroupMembership struct {
	CustomerId    string         `json:"customerId"`
	CustomerGroup *CustomerGroup `json:"customerGroup"`
	CreatedAt     *DateTime      `json:"createdAt"`
	CreatedBy     InternalActor  `json:"createdBy"`
	UpdatedAt     *DateTime      `json:"updatedAt"`
	UpdatedBy     InternalActor  `json:"updatedBy"`
}

type CustomerGroupMembershipConnection struct {
	Edges    []CustomerGroupMembershipEdge `json:"edges"`
	PageInfo *PageInfo                     `json:"pageInfo"`
}

type CustomerGroupMembershipEdge struct {
	Cursor string                   `json:"cursor"`
	Node   *CustomerGroupMembership `json:"node"`
}

type CustomerIssuesFilter struct {
	Statuses []IssueStatus `json:"statuses,omitempty"`
}

// The customer attributes available for search, each of them mapped to a search expression.
// Exactly one of them must be provided in a single search condition.
type CustomerSearchCondition struct {
	// Search expression on the customer's full name.
	FullName *StringSearchExpression `json:"fullName,omitempty"`
	// Search expression on the customer's short name.
	ShortName *StringSearchExpression `json:"shortName,omitempty"`
	// Search expression on the customer's email address.
	Email *StringSearchExpression `json:"email,omitempty"`
	// Search expression on the customer's external id.
	ExternalId *StringSearchExpression `json:"externalId,omitempty"`
}

type CustomerSearchConnection struct {
	Edges    []CustomerSearchEdge `json:"edges"`
	PageInfo *PageInfo            `json:"pageInfo"`
}

type CustomerSearchEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Customer `json:"node"`
}

// The core customer life cycle.
type CustomerStatus string

const (
	// The default status of a customer when they don't have any open issues. Any activity on their timeline will move them into `ACTIVE`.
	CustomerStatusIdle CustomerStatus = "IDLE"
	// The customer is currently either waiting for help or being helped, depending on if they're assigned to a user or not.
	CustomerStatusActive CustomerStatus = "ACTIVE"
	// Indicates that a user is waiting for a customer to get back. Any activity on their timeline will move them into `ACTIVE`.
	CustomerStatusSnoozed CustomerStatus = "SNOOZED"
)

type CustomerStatusTransitionedEntry struct {
	PreviousStatus *CustomerStatus `json:"previousStatus,omitempty"`
	NextStatus     *CustomerStatus `json:"nextStatus,omitempty"`
}

func (*CustomerStatusTransitionedEntry) isEntry() {}

type CustomersFilter struct {
	Statuses                  []CustomerStatus            `json:"statuses,omitempty"`
	IsAssigned                *bool                       `json:"isAssigned,omitempty"`
	AssignedToUser            []string                    `json:"assignedToUser,omitempty"`
	LastCommunicationChannels []CommunicationChannelInput `json:"lastCommunicationChannels,omitempty"`
	// Filters customers to those with at least one issue of the given issue statuses (OPEN or RESOLVED).
	// Customers with no issues will not be included.
	// Can be combined with other issue filters.
	IssueStatuses []IssueStatus `json:"issueStatuses,omitempty"`
	// Filters customers to those with at least one issue of the given issue type IDs.
	// Customers with no issues will not be included.
	// Can be combined with other issue filters.
	IssueTypeIds []string `json:"issueTypeIds,omitempty"`
	// Filters customers to those with at least one issue of the given issue priority values.
	// Customers with no issues will not be included.
	// Can be combined with other issue filters.
	IssuePriorityValues []int32 `json:"issuePriorityValues,omitempty"`
	// When true, filters customers to those with at least one open issue. If false, only customers
	// who have not been marked as spam will be included.
	IsMarkedAsSpam *bool `json:"isMarkedAsSpam,omitempty"`
	// Filters customers to those with at least one of the given customer group IDs.
	// Customers with no groups will not be included.
	// Can be combined with other group filters.
	CustomerGroupIds []string `json:"customerGroupIds,omitempty"`
	// Filters customers to those with at least one of the given customer group keys.
	// Customers with no groups will not be included.
	// Can be combined with other group filters.
	CustomerGroupKeys []string `json:"customerGroupKeys,omitempty"`
}

// A query to search for customers. Search queries are combinations of search conditions, as defined
// below. At least one search condition must be provided.
type CustomersSearchQuery struct {
	// An array of search conditions that will be combined using a 'logical OR' to search for customers.
	Or []CustomerSearchCondition `json:"or,omitempty"`
}

type CustomersSort struct {
	Field     CustomersSortField `json:"field"`
	Direction SortDirection      `json:"direction"`
}

type CustomersSortField string

const (
	CustomersSortFieldFullName                                 CustomersSortField = "FULL_NAME"
	CustomersSortFieldStatusChangedAt                          CustomersSortField = "STATUS_CHANGED_AT"
	CustomersSortFieldTimelineInfoCustomerWaitingForReplySince CustomersSortField = "TIMELINE_INFO_CUSTOMER_WAITING_FOR_REPLY_SINCE"
	CustomersSortFieldLastIdleAt                               CustomersSortField = "LAST_IDLE_AT"
	// Sort based on the minimum value amongst all the customer's open issues' priorities.
	//
	// When sorting ascending, most urgent issues will be first. Otherwise, last.
	CustomersSortFieldOpenIssuesPrioritiesMinValue CustomersSortField = "OPEN_ISSUES_PRIORITIES_MIN_VALUE"
)

type DateTime struct {
	UnixTimestamp string `json:"unixTimestamp"`
	Iso8601       string `json:"iso8601"`
}

type DeleteApiKeyInput struct {
	ApiKeyId string `json:"apiKeyId"`
}

type DeleteApiKeyOutput struct {
	ApiKey *ApiKey        `json:"apiKey,omitempty"`
	Error  *MutationError `json:"error,omitempty"`
}

type DeleteCustomerCardConfigInput struct {
	// The customer card config ID to delete.
	CustomerCardConfigId string `json:"customerCardConfigId"`
}

type DeleteCustomerCardConfigOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteCustomerGroupInput struct {
	CustomerGroupId string `json:"customerGroupId"`
}

type DeleteCustomerGroupOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteCustomerInput struct {
	CustomerId string `json:"customerId"`
}

type DeleteCustomerOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteIssueInput struct {
	IssueId string `json:"issueId"`
}

type DeleteIssueLinkInput struct {
	IssueLinkId string `json:"issueLinkId"`
}

type DeleteIssueLinkOutput struct {
	IssueLink *IssueLink     `json:"issueLink,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type DeleteIssueOutput struct {
	Issue *Issue         `json:"issue,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type DeleteMachineUserInput struct {
	MachineUserId string `json:"machineUserId"`
}

type DeleteMachineUserOutput struct {
	MachineUser *MachineUser   `json:"machineUser,omitempty"`
	Error       *MutationError `json:"error,omitempty"`
}

type DeleteMyLinearIntegrationOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteMySlackIntegrationOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteNoteInput struct {
	NoteId string `json:"noteId"`
}

type DeleteNoteOutput struct {
	Note  *Note          `json:"note,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type DeleteSnippetInput struct {
	SnippetId string `json:"snippetId"`
}

type DeleteSnippetOutput struct {
	Snippet *Snippet       `json:"snippet,omitempty"`
	Error   *MutationError `json:"error,omitempty"`
}

type DeleteUserInput struct {
	UserId string `json:"userId"`
}

type DeleteUserOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteWebhookTargetInput struct {
	WebhookTargetId string `json:"webhookTargetId"`
}

type DeleteWebhookTargetOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteWorkspaceAppInput struct {
	WorkspaceAppId string `json:"workspaceAppId"`
}

type DeleteWorkspaceAppOutput struct {
	WorkspaceApp *WorkspaceApp  `json:"workspaceApp,omitempty"`
	Error        *MutationError `json:"error,omitempty"`
}

type DeleteWorkspaceAppPublicKeyInput struct {
	WorkspaceAppPublicKeyId string `json:"workspaceAppPublicKeyId"`
}

type DeleteWorkspaceAppPublicKeyOutput struct {
	WorkspaceAppPublicKey *WorkspaceAppPublicKey `json:"workspaceAppPublicKey,omitempty"`
	Error                 *MutationError         `json:"error,omitempty"`
}

type DeleteWorkspaceDiscordIntegrationInput struct {
	IntegrationId string `json:"integrationId"`
}

type DeleteWorkspaceDiscordIntegrationOutput struct {
	Integration *WorkspaceDiscordIntegration `json:"integration,omitempty"`
	Error       *MutationError               `json:"error,omitempty"`
}

type DeleteWorkspaceEmailDomainSettingsOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type DeleteWorkspaceInviteInput struct {
	InviteId string `json:"inviteId"`
}

type DeleteWorkspaceInviteOutput struct {
	Invite *WorkspaceInvite `json:"invite,omitempty"`
	Error  *MutationError   `json:"error,omitempty"`
}

type DeleteWorkspaceSlackIntegrationInput struct {
	IntegrationId string `json:"integrationId"`
}

type DeleteWorkspaceSlackIntegrationOutput struct {
	Integration *WorkspaceSlackIntegration `json:"integration,omitempty"`
	Error       *MutationError             `json:"error,omitempty"`
}

type DeletedCustomerActor struct {
	CustomerId string `json:"customerId"`
}

func (*DeletedCustomerActor) isActor() {}

type DeletedCustomerEmailActor struct {
	CustomerId string `json:"customerId"`
}

func (*DeletedCustomerEmailActor) isEmailActor() {}

type DnsRecord struct {
	Type          string    `json:"type"`
	Name          string    `json:"name"`
	Value         string    `json:"value"`
	IsVerified    bool      `json:"isVerified"`
	VerifiedAt    *DateTime `json:"verifiedAt,omitempty"`
	LastCheckedAt *DateTime `json:"lastCheckedAt,omitempty"`
}

type Email struct {
	Id                   string             `json:"id"`
	Customer             *Customer          `json:"customer"`
	InReplyToEmailId     string             `json:"inReplyToEmailId,omitempty"`
	From                 *EmailParticipant  `json:"from"`
	To                   *EmailParticipant  `json:"to"`
	Subject              *string            `json:"subject,omitempty"`
	TextContent          *string            `json:"textContent,omitempty"`
	Attachments          []Attachment       `json:"attachments"`
	AdditionalRecipients []EmailParticipant `json:"additionalRecipients"`
	HiddenRecipients     []EmailParticipant `json:"hiddenRecipients"`
	CreatedAt            *DateTime          `json:"createdAt"`
	CreatedBy            Actor              `json:"createdBy"`
	UpdatedAt            *DateTime          `json:"updatedAt"`
	UpdatedBy            Actor              `json:"updatedBy"`
}

type EmailActor struct {
	// Underlying value of the GraphQL union
	Value EmailActorValue `json:"-"`
}

func (base *EmailActor) UnmarshalJSON(b []byte) error {
	type Raw EmailActor
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "CustomerEmailActor":
		base.Value = new(CustomerEmailActor)
	case "DeletedCustomerEmailActor":
		base.Value = new(DeletedCustomerEmailActor)
	case "UserEmailActor":
		base.Value = new(UserEmailActor)
	case "SupportEmailAddressEmailActor":
		base.Value = new(SupportEmailAddressEmailActor)
	case "":
		return fmt.Errorf("gqlclient: union EmailActor: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union EmailActor: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// EmailActorValue is one of: CustomerEmailActor | DeletedCustomerEmailActor | UserEmailActor | SupportEmailAddressEmailActor
type EmailActorValue interface {
	isEmailActor()
}

// An object modelling an email address and if it's been verified.
type EmailAddress struct {
	// The email address.
	Email string `json:"email"`
	// If the email address ownership has been verified (e.g. via sending an email with a code). If the email is not verified, Plain may not email this address.
	IsVerified bool `json:"isVerified"`
	// When the email became verified in Plain.
	VerifiedAt *DateTime `json:"verifiedAt,omitempty"`
}

type EmailAddressInput struct {
	Email      string `json:"email"`
	IsVerified bool   `json:"isVerified"`
}

type EmailAuthenticity string

const (
	EmailAuthenticityPass    EmailAuthenticity = "PASS"
	EmailAuthenticityFail    EmailAuthenticity = "FAIL"
	EmailAuthenticityUnknown EmailAuthenticity = "UNKNOWN"
)

type EmailEntry struct {
	EmailId              string             `json:"emailId"`
	To                   *EmailParticipant  `json:"to"`
	From                 *EmailParticipant  `json:"from"`
	AdditionalRecipients []EmailParticipant `json:"additionalRecipients"`
	HiddenRecipients     []EmailParticipant `json:"hiddenRecipients"`
	Subject              *string            `json:"subject,omitempty"`
	// The most recent email's text content.
	TextContent *string `json:"textContent,omitempty"`
	// Boolean indicating whether there is more text content available that can be resolved via the `fullTextContent` field.
	HasMoreTextContent bool `json:"hasMoreTextContent"`
	// The full email's text content, including all replies.
	FullTextContent *string `json:"fullTextContent,omitempty"`
	// The most recent email's markdown content.
	MarkdownContent *string `json:"markdownContent,omitempty"`
	// Boolean indicating whether there is more markdown content available that can be resolved via the `fullMarkdownContent` field.
	HasMoreMarkdownContent bool `json:"hasMoreMarkdownContent"`
	// The full email's markdown content, including all replies.
	FullMarkdownContent *string           `json:"fullMarkdownContent,omitempty"`
	Authenticity        EmailAuthenticity `json:"authenticity"`
	// When the email was sent. Initially set to null while the email is being processed.
	SentAt *DateTime `json:"sentAt,omitempty"`
	// When the email was received by Plain.
	ReceivedAt  *DateTime    `json:"receivedAt,omitempty"`
	Attachments []Attachment `json:"attachments"`
	// Whether this email entry is the start of a new thread in Plain. Can be used to show the full email content.
	IsStartOfThread bool `json:"isStartOfThread"`
}

func (*EmailEntry) isEntry() {}

type EmailParticipant struct {
	Name       *string     `json:"name,omitempty"`
	Email      string      `json:"email"`
	EmailActor *EmailActor `json:"emailActor,omitempty"`
}

type EmailParticipantInput struct {
	Name  *string `json:"name,omitempty"`
	Email string  `json:"email"`
}

// A union of all possible entries that can appear in a timeline.
type Entry struct {
	// Underlying value of the GraphQL union
	Value EntryValue `json:"-"`
}

func (base *Entry) UnmarshalJSON(b []byte) error {
	type Raw Entry
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "IssueStatusTransitionedEntry":
		base.Value = new(IssueStatusTransitionedEntry)
	case "IssueIssueTypeChangedEntry":
		base.Value = new(IssueIssueTypeChangedEntry)
	case "IssueDeletedEntry":
		base.Value = new(IssueDeletedEntry)
	case "NoteEntry":
		base.Value = new(NoteEntry)
	case "CustomerAssignmentTransitionedEntry":
		base.Value = new(CustomerAssignmentTransitionedEntry)
	case "ChatEntry":
		base.Value = new(ChatEntry)
	case "CustomerStatusTransitionedEntry":
		base.Value = new(CustomerStatusTransitionedEntry)
	case "EmailEntry":
		base.Value = new(EmailEntry)
	case "CustomEntry":
		base.Value = new(CustomEntry)
	case "LinearIssueLinkStateTransitionedEntry":
		base.Value = new(LinearIssueLinkStateTransitionedEntry)
	case "IssuePriorityChangedEntry":
		base.Value = new(IssuePriorityChangedEntry)
	case "":
		return fmt.Errorf("gqlclient: union Entry: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union Entry: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// EntryValue is one of: IssueStatusTransitionedEntry | IssueIssueTypeChangedEntry | IssueDeletedEntry | NoteEntry | CustomerAssignmentTransitionedEntry | ChatEntry | CustomerStatusTransitionedEntry | EmailEntry | CustomEntry | LinearIssueLinkStateTransitionedEntry | IssuePriorityChangedEntry
type EntryValue interface {
	isEntry()
}

type FileSize struct {
	Bytes     int32   `json:"bytes"`
	KiloBytes float64 `json:"kiloBytes"`
	MegaBytes float64 `json:"megaBytes"`
}

type IntInput struct {
	Value int32 `json:"value"`
}

type InternalActor struct {
	// Underlying value of the GraphQL union
	Value InternalActorValue `json:"-"`
}

func (base *InternalActor) UnmarshalJSON(b []byte) error {
	type Raw InternalActor
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "UserActor":
		base.Value = new(UserActor)
	case "SystemActor":
		base.Value = new(SystemActor)
	case "MachineUserActor":
		base.Value = new(MachineUserActor)
	case "":
		return fmt.Errorf("gqlclient: union InternalActor: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union InternalActor: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// InternalActorValue is one of: UserActor | SystemActor | MachineUserActor
type InternalActorValue interface {
	isInternalActor()
}

type InviteUserToWorkspaceInput struct {
	Email   string   `json:"email"`
	RoleIds []string `json:"roleIds"`
}

type InviteUserToWorkspaceOutput struct {
	Invite *WorkspaceInvite `json:"invite,omitempty"`
	Error  *MutationError   `json:"error,omitempty"`
}

type Issue struct {
	Id        string               `json:"id"`
	IssueType *IssueType           `json:"issueType"`
	Customer  *Customer            `json:"customer"`
	Status    IssueStatus          `json:"status"`
	IssueKey  string               `json:"issueKey"`
	Links     *IssueLinkConnection `json:"links"`
	IsDeleted bool                 `json:"isDeleted"`
	DeletedAt *DateTime            `json:"deletedAt,omitempty"`
	DeletedBy *Actor               `json:"deletedBy,omitempty"`
	CreatedAt *DateTime            `json:"createdAt"`
	CreatedBy Actor                `json:"createdBy"`
	UpdatedAt *DateTime            `json:"updatedAt"`
	UpdatedBy Actor                `json:"updatedBy"`
	// The priority of the issue. May be different to the default priority of the issue type.
	Priority *IssuePriority `json:"priority"`
}

type IssueChange struct {
	ChangeType ChangeType `json:"changeType"`
	Issue      *Issue     `json:"issue"`
}

type IssueConnection struct {
	Edges    []IssueEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type IssueDeletedEntry struct {
	IssueId             string         `json:"issueId"`
	IssueKey            string         `json:"issueKey"`
	IssueTypeId         string         `json:"issueTypeId"`
	IssueTypePublicName string         `json:"issueTypePublicName"`
	IssueTypeIcon       *string        `json:"issueTypeIcon,omitempty"`
	Status              IssueStatus    `json:"status"`
	Priority            *IssuePriority `json:"priority"`
}

func (*IssueDeletedEntry) isEntry() {}

type IssueEdge struct {
	Cursor string `json:"cursor"`
	Node   *Issue `json:"node"`
}

type IssueIssueTypeChangedEntry struct {
	IssueId                     string         `json:"issueId"`
	IssueKey                    string         `json:"issueKey"`
	PreviousIssueTypePublicName string         `json:"previousIssueTypePublicName"`
	PreviousIssueTypeId         string         `json:"previousIssueTypeId"`
	PreviousIssueTypeIcon       *string        `json:"previousIssueTypeIcon,omitempty"`
	NextIssueTypePublicName     string         `json:"nextIssueTypePublicName"`
	NextIssueTypeId             string         `json:"nextIssueTypeId"`
	NextIssueTypeIcon           *string        `json:"nextIssueTypeIcon,omitempty"`
	Status                      IssueStatus    `json:"status"`
	Priority                    *IssuePriority `json:"priority"`
}

func (*IssueIssueTypeChangedEntry) isEntry() {}

type IssueLink struct {
	Id        string        `json:"id"`
	Issue     *Issue        `json:"issue"`
	CreatedAt *DateTime     `json:"createdAt"`
	CreatedBy InternalActor `json:"createdBy"`
	UpdatedAt *DateTime     `json:"updatedAt"`
	UpdatedBy InternalActor `json:"updatedBy"`

	// Underlying value of the GraphQL interface
	Value IssueLinkValue `json:"-"`
}

func (base *IssueLink) UnmarshalJSON(b []byte) error {
	type Raw IssueLink
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "LinearIssueIssueLink":
		base.Value = new(LinearIssueIssueLink)
	case "":
		return nil
	default:
		return fmt.Errorf("gqlclient: interface IssueLink: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// IssueLinkValue is one of: LinearIssueIssueLink
type IssueLinkValue interface {
	isIssueLink()
}

type IssueLinkConnection struct {
	Edges    []IssueLinkEdge `json:"edges"`
	PageInfo *PageInfo       `json:"pageInfo"`
}

type IssueLinkEdge struct {
	Cursor string     `json:"cursor"`
	Node   *IssueLink `json:"node"`
}

// The priority of an issue.
type IssuePriority struct {
	// The display name of the priority.
	Label string `json:"label"`
	// The value of the priority. Lower values are higher priority.
	//
	// Valid values are 0, 1, 2 and 3. 0 is the highest priority.
	Value int32 `json:"value"`
}

// Added to the timeline when an issue's priority changes.
type IssuePriorityChangedEntry struct {
	// The ID of the issue that changed priority.
	IssueId string `json:"issueId"`
	// The key of the issue that changed priority.
	IssueKey string `json:"issueKey"`
	// The ID of the issue type of the issue that changed priority.
	IssueTypeId string `json:"issueTypeId"`
	// The public name of the issue type of the issue that changed priority.
	IssueTypePublicName string `json:"issueTypePublicName"`
	// The icon of the issue type of the issue that changed priority.
	IssueTypeIcon *string `json:"issueTypeIcon,omitempty"`
	// The current issue status.
	Status IssueStatus `json:"status"`
	// The previous issue priority.
	PreviousPriority *IssuePriority `json:"previousPriority"`
	// The current issue priority.
	NextPriority *IssuePriority `json:"nextPriority"`
}

func (*IssuePriorityChangedEntry) isEntry() {}

type IssueStatus string

const (
	IssueStatusOpen     IssueStatus = "OPEN"
	IssueStatusResolved IssueStatus = "RESOLVED"
)

type IssueStatusTransitionedEntry struct {
	IssueId             string         `json:"issueId"`
	IssueKey            string         `json:"issueKey"`
	IssueTypeId         string         `json:"issueTypeId"`
	IssueTypePublicName string         `json:"issueTypePublicName"`
	IssueTypeIcon       *string        `json:"issueTypeIcon,omitempty"`
	PreviousStatus      *IssueStatus   `json:"previousStatus,omitempty"`
	NextStatus          IssueStatus    `json:"nextStatus"`
	Priority            *IssuePriority `json:"priority"`
}

func (*IssueStatusTransitionedEntry) isEntry() {}

type IssueType struct {
	Id         string         `json:"id"`
	PublicName string         `json:"publicName"`
	IsArchived bool           `json:"isArchived"`
	ArchivedBy *InternalActor `json:"archivedBy,omitempty"`
	ArchivedAt *DateTime      `json:"archivedAt,omitempty"`
	CreatedAt  *DateTime      `json:"createdAt"`
	CreatedBy  InternalActor  `json:"createdBy"`
	UpdatedAt  *DateTime      `json:"updatedAt"`
	UpdatedBy  InternalActor  `json:"updatedBy"`
	// The default priority for issues of this type.
	DefaultIssuePriority *IssuePriority `json:"defaultIssuePriority"`
	// The icon for this issue type.
	Icon *string `json:"icon,omitempty"`
}

type IssueTypeConnection struct {
	Edges    []IssueTypeEdge `json:"edges"`
	PageInfo *PageInfo       `json:"pageInfo"`
}

type IssueTypeEdge struct {
	Cursor string     `json:"cursor"`
	Node   *IssueType `json:"node"`
}

type IssueTypeFilter struct {
	IsArchived *bool `json:"isArchived,omitempty"`
}

type IssuesFilter struct {
	CustomerId   string        `json:"customerId,omitempty"`
	Statuses     []IssueStatus `json:"statuses,omitempty"`
	IssueTypeIds []string      `json:"issueTypeIds,omitempty"`
	// Filters issues to those with the given issue priority values.
	PriorityValues []int32 `json:"priorityValues,omitempty"`
}

type IssuesSort struct {
	Field     IssuesSortField `json:"field"`
	Direction SortDirection   `json:"direction"`
}

type IssuesSortField string

const (
	// Sort by the issue's priority value.
	IssuesSortFieldPriorityValue IssuesSortField = "PRIORITY_VALUE"
)

type LinearIntegrationToken struct {
	Token string `json:"token"`
}

type LinearIssueIssueLink struct {
	Id             string        `json:"id"`
	Issue          *Issue        `json:"issue"`
	CreatedAt      *DateTime     `json:"createdAt"`
	CreatedBy      InternalActor `json:"createdBy"`
	UpdatedAt      *DateTime     `json:"updatedAt"`
	UpdatedBy      InternalActor `json:"updatedBy"`
	LinearIssueId  string        `json:"linearIssueId"`
	LinearIssueUrl string        `json:"linearIssueUrl"`
}

func (*LinearIssueIssueLink) isIssueLink() {}

type LinearIssueIssueLinkInput struct {
	LinearIssueId  string `json:"linearIssueId"`
	LinearIssueUrl string `json:"linearIssueUrl"`
}

type LinearIssueLinkStateTransitionedEntry struct {
	IssueId               string  `json:"issueId"`
	IssueKey              string  `json:"issueKey"`
	IssueTypeId           string  `json:"issueTypeId"`
	IssueTypePublicName   string  `json:"issueTypePublicName"`
	IssueTypeIcon         *string `json:"issueTypeIcon,omitempty"`
	LinearIssueId         string  `json:"linearIssueId"`
	PreviousLinearStateId string  `json:"previousLinearStateId"`
	NextLinearStateId     string  `json:"nextLinearStateId"`
}

func (*LinearIssueLinkStateTransitionedEntry) isEntry() {}

type MachineUser struct {
	Id          string            `json:"id"`
	FullName    string            `json:"fullName"`
	PublicName  string            `json:"publicName"`
	Description *string           `json:"description,omitempty"`
	ApiKey      *ApiKey           `json:"apiKey,omitempty"`
	ApiKeys     *ApiKeyConnection `json:"apiKeys"`
	CreatedBy   InternalActor     `json:"createdBy"`
	CreatedAt   *DateTime         `json:"createdAt"`
	UpdatedBy   InternalActor     `json:"updatedBy"`
	UpdatedAt   *DateTime         `json:"updatedAt"`
	IsDeleted   bool              `json:"isDeleted"`
	DeletedAt   *DateTime         `json:"deletedAt,omitempty"`
	DeletedBy   *Actor            `json:"deletedBy,omitempty"`
}

type MachineUserActor struct {
	MachineUserId string       `json:"machineUserId"`
	MachineUser   *MachineUser `json:"machineUser"`
}

func (*MachineUserActor) isActor() {}

func (*MachineUserActor) isInternalActor() {}

type MachineUserConnection struct {
	Edges    []MachineUserEdge `json:"edges"`
	PageInfo *PageInfo         `json:"pageInfo"`
}

type MachineUserEdge struct {
	Cursor string       `json:"cursor"`
	Node   *MachineUser `json:"node"`
}

type MarkCustomerAsSpamInput struct {
	CustomerId string `json:"customerId"`
}

type MarkCustomerAsSpamOutput struct {
	Customer *Customer      `json:"customer,omitempty"`
	Error    *MutationError `json:"error,omitempty"`
}

type MarkTimelineAsReadInput struct {
	CustomerId          string `json:"customerId"`
	LastTimelineEntryId string `json:"lastTimelineEntryId"`
}

type MarkTimelineAsReadOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type MonthlyUsage struct {
	ActiveUniqueCustomerCount int32 `json:"activeUniqueCustomerCount"`
}

// A type indicating an error has occurred while making a mutation.
type MutationError struct {
	// An English technical description of the error. This error is usually meant to be read by a developer and not an end user.
	Message string `json:"message"`
	// The type of error. Can be used to display a user friendly error message.
	Type MutationErrorType `json:"type"`
	// A fixed error code that can be used to handle this error, see https://docs.plain.com/error-codes for a description of each code.
	Code string `json:"code"`
	// The array of fields that are impacted by this error.
	Fields []MutationFieldError `json:"fields"`
}

// An enum for why the mutation failed overall.
type MutationErrorType string

const (
	// Input validation failed, see the `fields` for details on why the input was invalid.
	MutationErrorTypeValidation MutationErrorType = "VALIDATION"
	// The user is not authorized to do this mutation. See `message` for details on which permissions are missing.
	MutationErrorTypeForbidden MutationErrorType = "FORBIDDEN"
	// An unknown internal server error occurred. Retry the mutation and if it persists, please email help@plain.com
	MutationErrorTypeInternal MutationErrorType = "INTERNAL"
)

// A type indicating an error has occurred with a specific field in the input.
type MutationFieldError struct {
	// The name of the field for which the error happened.
	Field string `json:"field"`
	// An English technical description of the error. This error is usually meant to be read by a developer and not an end user.
	Message string `json:"message"`
	// The type of the error. Can be used to display a user friendly error message.
	Type MutationFieldErrorType `json:"type"`
}

// An enum specific to each field, explaining why validation failed.
type MutationFieldErrorType string

const (
	// The field was provided, but didn't pass the requirements of the field. See `message` for details on why.
	MutationFieldErrorTypeValidation MutationFieldErrorType = "VALIDATION"
	// The field is required to be provided. String inputs may be trimmed and checked for emptiness.
	MutationFieldErrorTypeRequired MutationFieldErrorType = "REQUIRED"
	// The input field referenced an entity that wasn't found.
	MutationFieldErrorTypeNotFound MutationFieldErrorType = "NOT_FOUND"
)

type Note struct {
	Id        string    `json:"id"`
	Text      string    `json:"text"`
	Customer  *Customer `json:"customer"`
	IsDeleted bool      `json:"isDeleted"`
	CreatedAt *DateTime `json:"createdAt"`
	CreatedBy Actor     `json:"createdBy"`
	DeletedAt *DateTime `json:"deletedAt,omitempty"`
	DeletedBy *Actor    `json:"deletedBy,omitempty"`
	UpdatedAt *DateTime `json:"updatedAt"`
	UpdatedBy Actor     `json:"updatedBy"`
}

type NoteEntry struct {
	NoteId string `json:"noteId"`
	Text   string `json:"text"`
}

func (*NoteEntry) isEntry() {}

type OptionalStringInput struct {
	Value *string `json:"value,omitempty"`
}

type PageInfo struct {
	HasPreviousPage bool    `json:"hasPreviousPage"`
	HasNextPage     bool    `json:"hasNextPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Permissions struct {
	Permissions []string `json:"permissions"`
}

type ReloadCustomerCardInstanceInput struct {
	CustomerId           string `json:"customerId"`
	CustomerCardConfigId string `json:"customerCardConfigId"`
}

type ReloadCustomerCardInstanceOutput struct {
	// The reloaded customer card instance. Currently this will always be a `CustomerCardInstanceLoading` type.
	CustomerCardInstance *CustomerCardInstance `json:"customerCardInstance,omitempty"`
	Error                *MutationError        `json:"error,omitempty"`
}

type RemoveCustomerFromCustomerGroupsInput struct {
	CustomerId               string                    `json:"customerId"`
	CustomerGroupIdentifiers []CustomerGroupIdentifier `json:"customerGroupIdentifiers"`
}

type RemoveCustomerFromCustomerGroupsOutput struct {
	Error *MutationError `json:"error,omitempty"`
}

type ReopenIssueInput struct {
	IssueId string `json:"issueId"`
}

type ReopenIssueOutput struct {
	Issue *Issue         `json:"issue,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type ReorderCustomerCardConfigsInput struct {
	// An array of ordering updates.
	CustomerCardConfigOrders []CustomerCardConfigOrderInput `json:"customerCardConfigOrders"`
}

type ReorderCustomerCardConfigsOutput struct {
	// The reordered customer card configs.
	CustomerCardConfigs []CustomerCardConfig `json:"customerCardConfigs,omitempty"`
	Error               *MutationError       `json:"error,omitempty"`
}

type ReplyToEmailInput struct {
	CustomerId           string                  `json:"customerId"`
	InReplyToEmailId     string                  `json:"inReplyToEmailId"`
	TextContent          string                  `json:"textContent"`
	AttachmentIds        []string                `json:"attachmentIds,omitempty"`
	AdditionalRecipients []EmailParticipantInput `json:"additionalRecipients,omitempty"`
	HiddenRecipients     []EmailParticipantInput `json:"hiddenRecipients,omitempty"`
}

type ReplyToEmailOutput struct {
	Email *Email         `json:"email,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type ResolveIssueInput struct {
	IssueId string `json:"issueId"`
}

type ResolveIssueOutput struct {
	Issue *Issue         `json:"issue,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type Role struct {
	Id                     string   `json:"id"`
	Name                   string   `json:"name"`
	Description            *string  `json:"description,omitempty"`
	Permissions            []string `json:"permissions"`
	IsAssignableToCustomer bool     `json:"isAssignableToCustomer"`
}

type RoleConnection struct {
	Edges    []RoleEdge `json:"edges"`
	PageInfo *PageInfo  `json:"pageInfo"`
}

type RoleEdge struct {
	Cursor string `json:"cursor"`
	Node   *Role  `json:"node"`
}

type SendChatInput struct {
	CustomerId    string   `json:"customerId"`
	Text          *string  `json:"text,omitempty"`
	AttachmentIds []string `json:"attachmentIds,omitempty"`
}

type SendChatOutput struct {
	Chat  *Chat          `json:"chat,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

type SendNewEmailInput struct {
	CustomerId           string                  `json:"customerId"`
	Subject              string                  `json:"subject"`
	TextContent          string                  `json:"textContent"`
	AttachmentIds        []string                `json:"attachmentIds,omitempty"`
	AdditionalRecipients []EmailParticipantInput `json:"additionalRecipients,omitempty"`
	HiddenRecipients     []EmailParticipantInput `json:"hiddenRecipients,omitempty"`
}

type SendNewEmailOutput struct {
	Email *Email         `json:"email,omitempty"`
	Error *MutationError `json:"error,omitempty"`
}

// A union of different types of settings.
type Setting struct {
	// Underlying value of the GraphQL union
	Value SettingValue `json:"-"`
}

func (base *Setting) UnmarshalJSON(b []byte) error {
	type Raw Setting
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "BooleanSetting":
		base.Value = new(BooleanSetting)
	case "":
		return fmt.Errorf("gqlclient: union Setting: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union Setting: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// SettingValue is one of: BooleanSetting
type SettingValue interface {
	isSetting()
}

type SettingScope struct {
	Id        string           `json:"id,omitempty"`
	ScopeType SettingScopeType `json:"scopeType"`
}

// An input to specify the scope for a setting.
type SettingScopeInput struct {
	// An optional ID input. Depends on the type of scope if this is required.
	Id string `json:"id,omitempty"`
	// Determines the type of the scope.
	ScopeType SettingScopeType `json:"scopeType"`
}

// An enum to describe the type of scope the setting is for.
type SettingScopeType string

const (
	// Scope for any user level settings
	// An `id` is not needed as it will implicitly be the authenticated user's id.
	SettingScopeTypeUser SettingScopeType = "USER"
	// Scope for the authenticated user's email notification settings.
	// An `id` is not needed as it will implicitly be the authenticated user's id.
	SettingScopeTypeUserEmailNotifications SettingScopeType = "USER_EMAIL_NOTIFICATIONS"
	// Scope for the authenticated user's slack notification settings.
	// An `id` is not needed as it will implicitly be the authenticated user's id.
	SettingScopeTypeUserSlackNotifications SettingScopeType = "USER_SLACK_NOTIFICATIONS"
	// Scope for slack notifications configured for the whole workspace.
	// An `id` is mandatory and should be a workspace slack integration id (`wsSlackInt_123`)
	SettingScopeTypeWorkspaceSlackNotifications SettingScopeType = "WORKSPACE_SLACK_NOTIFICATIONS"
	// Scope for discord notifications configured for the whole workspace.
	// An `id` is mandatory and should be a workspace discord integration id (`wsDiscordInt_123`)
	SettingScopeTypeWorkspaceDiscordNotifications SettingScopeType = "WORKSPACE_DISCORD_NOTIFICATIONS"
	// Scope for workspace level settings for the whole workspace.
	// An `id` is not needed as it will implicitly be the current workspace id.
	SettingScopeTypeWorkspace SettingScopeType = "WORKSPACE"
)

// An input "union" where exactly one field may be be provided as an input.
// Current API only supports booleans but as the API expands more optional fields will be added.
type SettingValueInput struct {
	// If the setting is a boolean value then this field should be set.
	Boolean *bool `json:"boolean,omitempty"`
}

type Snippet struct {
	Id        string         `json:"id"`
	Name      string         `json:"name"`
	Text      string         `json:"text"`
	IsDeleted bool           `json:"isDeleted"`
	CreatedAt *DateTime      `json:"createdAt"`
	CreatedBy InternalActor  `json:"createdBy"`
	UpdatedAt *DateTime      `json:"updatedAt"`
	UpdatedBy InternalActor  `json:"updatedBy"`
	DeletedAt *DateTime      `json:"deletedAt,omitempty"`
	DeletedBy *InternalActor `json:"deletedBy,omitempty"`
}

type SnippetConnection struct {
	Edges    []SnippetEdge `json:"edges"`
	PageInfo *PageInfo     `json:"pageInfo"`
}

type SnippetEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Snippet `json:"node"`
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

type StringInput struct {
	Value string `json:"value"`
}

// The different ways in which a string is matched.
// Exactly one of these must be provided in a single search expression.
type StringSearchExpression struct {
	// Case-insensitive match values containing the provided string.
	CaseInsensitiveContains *string `json:"caseInsensitiveContains,omitempty"`
}

type SubscriptionAcknowledgement struct {
	SubscriptionId string `json:"subscriptionId"`
}

func (*SubscriptionAcknowledgement) isCustomerCardInstanceChangesResult() {}

type SubscriptionEventType struct {
	EventType   string `json:"eventType"`
	Description string `json:"description"`
}

type SupportEmailAddressEmailActor struct {
	SupportEmailAddress string `json:"supportEmailAddress"`
}

func (*SupportEmailAddressEmailActor) isEmailActor() {}

type SystemActor struct {
	SystemId string `json:"systemId"`
}

func (*SystemActor) isActor() {}

func (*SystemActor) isInternalActor() {}

type TimelineEntry struct {
	Id         string    `json:"id"`
	CustomerId string    `json:"customerId"`
	Timestamp  *DateTime `json:"timestamp"`
	Entry      Entry     `json:"entry"`
	Actor      Actor     `json:"actor"`
}

type TimelineEntryChange struct {
	ChangeType    ChangeType     `json:"changeType"`
	TimelineEntry *TimelineEntry `json:"timelineEntry"`
}

type TimelineEntryConnection struct {
	Edges    []TimelineEntryEdge `json:"edges"`
	PageInfo *PageInfo           `json:"pageInfo"`
}

type TimelineEntryEdge struct {
	Cursor string         `json:"cursor"`
	Node   *TimelineEntry `json:"node"`
}

type TimelineEntryPreview struct {
	PreviewText *string   `json:"previewText,omitempty"`
	Actor       Actor     `json:"actor"`
	Timestamp   *DateTime `json:"timestamp"`
}

type TimelineInfo struct {
	AssignedUserUnreadCount      int32                      `json:"assignedUserUnreadCount"`
	LastCommunication            *TimelineInfoCommunication `json:"lastCommunication,omitempty"`
	LastTimelineEntryPreview     *TimelineEntryPreview      `json:"lastTimelineEntryPreview,omitempty"`
	CustomerWaitingForReplySince *DateTime                  `json:"customerWaitingForReplySince,omitempty"`
	CreatedAt                    *DateTime                  `json:"createdAt"`
	CreatedBy                    Actor                      `json:"createdBy"`
	UpdatedAt                    *DateTime                  `json:"updatedAt"`
	UpdatedBy                    Actor                      `json:"updatedBy"`
}

type TimelineInfoCommunication struct {
	CommunicationChannel CommunicationChannel `json:"communicationChannel"`
	PreviewText          *string              `json:"previewText,omitempty"`
	Actor                Actor                `json:"actor"`
	Timestamp            *DateTime            `json:"timestamp"`
}

type UnarchiveIssueTypeInput struct {
	IssueTypeId string `json:"issueTypeId"`
}

type UnarchiveIssueTypeOutput struct {
	IssueType *IssueType     `json:"issueType,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type UnassignAllCustomersInput struct {
	UserId string `json:"userId"`
}

type UnassignAllCustomersOutput struct {
	Error                   *MutationError `json:"error,omitempty"`
	UnassignedCustomerCount *int32         `json:"unassignedCustomerCount,omitempty"`
}

type UnmarkCustomerAsSpamInput struct {
	CustomerId string `json:"customerId"`
}

type UnmarkCustomerAsSpamOutput struct {
	Customer *Customer      `json:"customer,omitempty"`
	Error    *MutationError `json:"error,omitempty"`
}

// For constraints and details on the fields see the `CustomerCardConfig` type.
type UpdateCustomerCardConfigInput struct {
	// The customer card config to update.
	CustomerCardConfigId string `json:"customerCardConfigId"`
	// If provided, will update the order.
	Order *IntInput `json:"order,omitempty"`
	// If provided, will update the title.
	Title *StringInput `json:"title,omitempty"`
	// If provided, will update the key. Keys must be unique in a workspace.
	Key *StringInput `json:"key,omitempty"`
	// If provided, will update the default time to live seconds.
	DefaultTimeToLiveSeconds *IntInput `json:"defaultTimeToLiveSeconds,omitempty"`
	// If provided, will update the API URL. Requires the `customerCardConfigApiDetails:edit` permission.
	ApiUrl *StringInput `json:"apiUrl,omitempty"`
	// If provided, will replace the existing API headers. Requires the `customerCardConfigApiDetails:edit` permission.
	ApiHeaders []CustomerCardConfigApiHeaderInput `json:"apiHeaders,omitempty"`
	// If provided, will update the enabled flag.
	IsEnabled *BooleanInput `json:"isEnabled,omitempty"`
}

type UpdateCustomerCardConfigOutput struct {
	// The updated customer card config.
	CustomerCardConfig *CustomerCardConfig `json:"customerCardConfig,omitempty"`
	Error              *MutationError      `json:"error,omitempty"`
}

type UpdateCustomerGroupInput struct {
	CustomerGroupId string       `json:"customerGroupId"`
	Name            *StringInput `json:"name,omitempty"`
	Key             *StringInput `json:"key,omitempty"`
	Color           *StringInput `json:"color,omitempty"`
}

type UpdateCustomerGroupOutput struct {
	CustomerGroup *CustomerGroup `json:"customerGroup,omitempty"`
	Error         *MutationError `json:"error,omitempty"`
}

type UpdateIssueTypeInput struct {
	IssueTypeId string       `json:"issueTypeId"`
	PublicName  *StringInput `json:"publicName,omitempty"`
	// The priority value for issues created with this issue type.
	//
	// Valid values are 0, 1, 2 and 3.
	DefaultIssuePriorityValue *IntInput `json:"defaultIssuePriorityValue,omitempty"`
	// The icon to use for this issue type. The maximum length is 50 characters.
	//
	// Only lowercase alphanumeric characters, '-' and '_' are allowed.
	Icon *StringInput `json:"icon,omitempty"`
}

type UpdateIssueTypeOutput struct {
	IssueType *IssueType     `json:"issueType,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type UpdateMachineUserInput struct {
	MachineUserId string       `json:"machineUserId"`
	FullName      *StringInput `json:"fullName,omitempty"`
	PublicName    *StringInput `json:"publicName,omitempty"`
	Description   *StringInput `json:"description,omitempty"`
}

type UpdateMachineUserOutput struct {
	MachineUser *MachineUser   `json:"machineUser,omitempty"`
	Error       *MutationError `json:"error,omitempty"`
}

// An input provided to the `updateSetting` mutation.
// For more info on settings, please see: https://docs.plain.com/advanced/settings.
type UpdateSettingInput struct {
	// A code for the setting.
	Code string `json:"code"`
	// A valid scope for the setting code. To see what the valid scopes are for a specific setting, please see: https://docs.plain.com/advanced/settings.
	Scope SettingScopeInput `json:"scope"`
	// The setting value.
	Value SettingValueInput `json:"value"`
}

// An output type provided by the `updateSetting` mutation.
// Returns the updated setting or an error.
type UpdateSettingOutput struct {
	// The updated setting.
	Setting *Setting       `json:"setting,omitempty"`
	Error   *MutationError `json:"error,omitempty"`
}

type UpdateSnippetInput struct {
	SnippetId string       `json:"snippetId"`
	Name      *StringInput `json:"name,omitempty"`
	Text      *StringInput `json:"text,omitempty"`
}

type UpdateSnippetOutput struct {
	Snippet *Snippet       `json:"snippet,omitempty"`
	Error   *MutationError `json:"error,omitempty"`
}

type UpdateWebhookTargetInput struct {
	WebhookTargetId    string                                `json:"webhookTargetId"`
	Url                *StringInput                          `json:"url,omitempty"`
	EventSubscriptions []WebhookTargetEventSubscriptionInput `json:"eventSubscriptions,omitempty"`
	IsEnabled          *BooleanInput                         `json:"isEnabled,omitempty"`
	Description        *StringInput                          `json:"description,omitempty"`
}

type UpdateWebhookTargetOutput struct {
	WebhookTarget *WebhookTarget `json:"webhookTarget,omitempty"`
	Error         *MutationError `json:"error,omitempty"`
}

type UpdateWorkspaceChatSettingsInput struct {
	IsEnabled bool `json:"isEnabled"`
}

type UpdateWorkspaceChatSettingsOutput struct {
	WorkspaceChatSettings *WorkspaceChatSettings `json:"workspaceChatSettings,omitempty"`
	Error                 *MutationError         `json:"error,omitempty"`
}

type UpdateWorkspaceEmailSettingsInput struct {
	IsEnabled bool `json:"isEnabled"`
}

type UpdateWorkspaceEmailSettingsOutput struct {
	WorkspaceEmailSettings *WorkspaceEmailSettings `json:"workspaceEmailSettings,omitempty"`
	Error                  *MutationError          `json:"error,omitempty"`
}

type UpdateWorkspaceInput struct {
	PublicName *StringInput `json:"publicName,omitempty"`
	Name       *StringInput `json:"name,omitempty"`
}

type UpdateWorkspaceOutput struct {
	Workspace *Workspace     `json:"workspace,omitempty"`
	Error     *MutationError `json:"error,omitempty"`
}

type UploadFormData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type UpsertCustomTimelineEntryInput struct {
	CustomerId    string           `json:"customerId"`
	ExternalId    string           `json:"externalId,omitempty"`
	Type          *string          `json:"type,omitempty"`
	ExpiresAt     *string          `json:"expiresAt,omitempty"`
	Timestamp     *string          `json:"timestamp,omitempty"`
	Title         string           `json:"title"`
	Components    []ComponentInput `json:"components"`
	AttachmentIds []string         `json:"attachmentIds,omitempty"`
	// When true, this will change the customer's status to "Active". This is useful if you are using custom timeline
	// entries for contact form submissions or other events which require some attention.
	//
	// Defaults to false.
	ChangeCustomerStatusToActive *bool `json:"changeCustomerStatusToActive,omitempty"`
	// When true, this will send a notification for the customer when the custom timeline entry is created. It will only
	// send the notification if the user has enabled the matching notification setting.
	//
	// Defaults to false.
	SendCustomTimelineEntryCreatedNotification *bool `json:"sendCustomTimelineEntryCreatedNotification,omitempty"`
}

type UpsertCustomTimelineEntryOutput struct {
	TimelineEntry *TimelineEntry `json:"timelineEntry,omitempty"`
	Result        *UpsertResult  `json:"result,omitempty"`
	Error         *MutationError `json:"error,omitempty"`
}

type UpsertCustomerIdentifierInput struct {
	ExternalId   string  `json:"externalId,omitempty"`
	EmailAddress *string `json:"emailAddress,omitempty"`
	CustomerId   string  `json:"customerId,omitempty"`
}

type UpsertCustomerInput struct {
	Identifier UpsertCustomerIdentifierInput `json:"identifier"`
	OnCreate   UpsertCustomerOnCreateInput   `json:"onCreate"`
	OnUpdate   UpsertCustomerOnUpdateInput   `json:"onUpdate"`
}

type UpsertCustomerOnCreateInput struct {
	ExternalId               string                    `json:"externalId,omitempty"`
	FullName                 string                    `json:"fullName"`
	ShortName                *string                   `json:"shortName,omitempty"`
	Email                    EmailAddressInput         `json:"email"`
	CustomerGroupIdentifiers []CustomerGroupIdentifier `json:"customerGroupIdentifiers,omitempty"`
}

type UpsertCustomerOnUpdateInput struct {
	ExternalId *OptionalStringInput `json:"externalId,omitempty"`
	FullName   *StringInput         `json:"fullName,omitempty"`
	ShortName  *OptionalStringInput `json:"shortName,omitempty"`
	Email      *EmailAddressInput   `json:"email,omitempty"`
}

type UpsertCustomerOutput struct {
	Result   *UpsertResult  `json:"result,omitempty"`
	Customer *Customer      `json:"customer,omitempty"`
	Error    *MutationError `json:"error,omitempty"`
}

type UpsertResult string

const (
	UpsertResultUpdated UpsertResult = "UPDATED"
	UpsertResultCreated UpsertResult = "CREATED"
	UpsertResultNoop    UpsertResult = "NOOP"
)

type User struct {
	Id string `json:"id"`
	// The full name e.g. Grace Hopper.
	FullName string `json:"fullName"`
	// A short name for use in UI e.g. Grace.
	PublicName string `json:"publicName"`
	// The email associated with this user. Email is unique per user.
	Email string `json:"email"`
	// Retrieve roles for a specific workspace + user.
	Roles           []Role        `json:"roles"`
	Status          UserStatus    `json:"status"`
	StatusChangedAt *DateTime     `json:"statusChangedAt"`
	CreatedAt       *DateTime     `json:"createdAt"`
	CreatedBy       InternalActor `json:"createdBy"`
	UpdatedAt       *DateTime     `json:"updatedAt"`
	UpdatedBy       InternalActor `json:"updatedBy"`
	IsDeleted       bool          `json:"isDeleted"`
	DeletedAt       *DateTime     `json:"deletedAt,omitempty"`
	DeletedBy       *Actor        `json:"deletedBy,omitempty"`
}

type UserAccount struct {
	Id string `json:"id"`
	// The full name e.g. Grace Hopper.
	FullName string `json:"fullName"`
	// A short name for use in UI e.g. Grace.
	PublicName string `json:"publicName"`
	// The email associated with this user. Email is unique per user.
	Email string `json:"email"`
}

type UserActor struct {
	UserId string `json:"userId"`
	User   *User  `json:"user"`
}

func (*UserActor) isActor() {}

func (*UserActor) isInternalActor() {}

type UserChange struct {
	ChangeType ChangeType `json:"changeType"`
	User       *User      `json:"user"`
}

type UserConnection struct {
	Edges    []UserEdge `json:"edges"`
	PageInfo *PageInfo  `json:"pageInfo"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type UserEmailActor struct {
	UserId string `json:"userId"`
	User   *User  `json:"user"`
}

func (*UserEmailActor) isEmailActor() {}

type UserLinearInstallationInfo struct {
	InstallationUrl string `json:"installationUrl"`
}

type UserLinearIntegration struct {
	IntegrationId          string        `json:"integrationId"`
	LinearOrganisationName string        `json:"linearOrganisationName"`
	LinearOrganisationId   string        `json:"linearOrganisationId"`
	CreatedAt              *DateTime     `json:"createdAt"`
	CreatedBy              InternalActor `json:"createdBy"`
	UpdatedAt              *DateTime     `json:"updatedAt"`
	UpdatedBy              InternalActor `json:"updatedBy"`
}

type UserSlackInstallationInfo struct {
	InstallationUrl string `json:"installationUrl"`
}

type UserSlackIntegration struct {
	IntegrationId       string        `json:"integrationId"`
	SlackTeamName       string        `json:"slackTeamName"`
	IsReinstallRequired bool          `json:"isReinstallRequired"`
	CreatedAt           *DateTime     `json:"createdAt"`
	CreatedBy           InternalActor `json:"createdBy"`
	UpdatedAt           *DateTime     `json:"updatedAt"`
	UpdatedBy           InternalActor `json:"updatedBy"`
}

type UserStatus string

const (
	UserStatusOnline  UserStatus = "ONLINE"
	UserStatusOffline UserStatus = "OFFLINE"
	UserStatusBreak   UserStatus = "BREAK"
)

type UsersFilter struct {
	IsAssignableToCustomer *bool `json:"isAssignableToCustomer,omitempty"`
}

type VerifyWorkspaceEmailDnsSettingsOutput struct {
	WorkspaceEmailDomainSettings *WorkspaceEmailDomainSettings `json:"workspaceEmailDomainSettings,omitempty"`
	Error                        *MutationError                `json:"error,omitempty"`
}

type VerifyWorkspaceEmailForwardingSettingsInput struct {
	IsForwardingConfigured bool `json:"isForwardingConfigured"`
}

type VerifyWorkspaceEmailForwardingSettingsOutput struct {
	WorkspaceEmailDomainSettings *WorkspaceEmailDomainSettings `json:"workspaceEmailDomainSettings,omitempty"`
	Error                        *MutationError                `json:"error,omitempty"`
}

type WebhookTarget struct {
	Id                 string                           `json:"id"`
	Url                string                           `json:"url"`
	Description        string                           `json:"description"`
	EventSubscriptions []WebhookTargetEventSubscription `json:"eventSubscriptions"`
	IsEnabled          bool                             `json:"isEnabled"`
	CreatedAt          *DateTime                        `json:"createdAt"`
	CreatedBy          InternalActor                    `json:"createdBy"`
	UpdatedAt          *DateTime                        `json:"updatedAt"`
	UpdatedBy          InternalActor                    `json:"updatedBy"`
}

type WebhookTargetConnection struct {
	Edges    []WebhookTargetEdge `json:"edges"`
	PageInfo *PageInfo           `json:"pageInfo"`
}

type WebhookTargetEdge struct {
	Cursor string         `json:"cursor"`
	Node   *WebhookTarget `json:"node"`
}

type WebhookTargetEventSubscription struct {
	EventType string `json:"eventType"`
}

type WebhookTargetEventSubscriptionInput struct {
	EventType string `json:"eventType"`
}

type Workspace struct {
	Id                     string                  `json:"id"`
	Name                   string                  `json:"name"`
	PublicName             string                  `json:"publicName"`
	IsDemoWorkspace        bool                    `json:"isDemoWorkspace"`
	CreatedBy              InternalActor           `json:"createdBy"`
	CreatedAt              *DateTime               `json:"createdAt"`
	UpdatedBy              InternalActor           `json:"updatedBy"`
	UpdatedAt              *DateTime               `json:"updatedAt"`
	WorkspaceEmailSettings *WorkspaceEmailSettings `json:"workspaceEmailSettings"`
	WorkspaceChatSettings  *WorkspaceChatSettings  `json:"workspaceChatSettings"`
}

type WorkspaceApp struct {
	Id         string        `json:"id"`
	AppKey     string        `json:"appKey"`
	Name       string        `json:"name"`
	PublicName string        `json:"publicName"`
	CreatedBy  InternalActor `json:"createdBy"`
	CreatedAt  *DateTime     `json:"createdAt"`
	UpdatedBy  InternalActor `json:"updatedBy"`
	UpdatedAt  *DateTime     `json:"updatedAt"`
}

type WorkspaceAppConnection struct {
	Edges    []WorkspaceAppEdge `json:"edges"`
	PageInfo *PageInfo          `json:"pageInfo"`
}

type WorkspaceAppEdge struct {
	Cursor string        `json:"cursor"`
	Node   *WorkspaceApp `json:"node"`
}

type WorkspaceAppPublicKey struct {
	Id          string        `json:"id"`
	Name        string        `json:"name"`
	Fingerprint string        `json:"fingerprint"`
	CreatedBy   InternalActor `json:"createdBy"`
	CreatedAt   *DateTime     `json:"createdAt"`
	UpdatedBy   InternalActor `json:"updatedBy"`
	UpdatedAt   *DateTime     `json:"updatedAt"`
}

type WorkspaceAppPublicKeyConnection struct {
	Edges    []WorkspaceAppPublicKeyEdge `json:"edges"`
	PageInfo *PageInfo                   `json:"pageInfo"`
}

type WorkspaceAppPublicKeyEdge struct {
	Cursor string                 `json:"cursor"`
	Node   *WorkspaceAppPublicKey `json:"node"`
}

type WorkspaceChatSettings struct {
	IsEnabled bool `json:"isEnabled"`
}

type WorkspaceConnection struct {
	Edges    []WorkspaceEdge `json:"edges"`
	PageInfo *PageInfo       `json:"pageInfo"`
}

type WorkspaceDiscordIntegration struct {
	IntegrationId string        `json:"integrationId"`
	Name          string        `json:"name"`
	WebhookUrl    string        `json:"webhookUrl"`
	CreatedAt     *DateTime     `json:"createdAt"`
	CreatedBy     InternalActor `json:"createdBy"`
	UpdatedAt     *DateTime     `json:"updatedAt"`
	UpdatedBy     InternalActor `json:"updatedBy"`
}

type WorkspaceDiscordIntegrationConnection struct {
	Edges    []WorkspaceDiscordIntegrationEdge `json:"edges"`
	PageInfo *PageInfo                         `json:"pageInfo"`
}

type WorkspaceDiscordIntegrationEdge struct {
	Cursor string                       `json:"cursor"`
	Node   *WorkspaceDiscordIntegration `json:"node"`
}

type WorkspaceEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Workspace `json:"node"`
}

type WorkspaceEmailDomainSettings struct {
	DomainName             string     `json:"domainName"`
	SupportEmailAddress    string     `json:"supportEmailAddress"`
	IsForwardingConfigured bool       `json:"isForwardingConfigured"`
	InboundForwardingEmail string     `json:"inboundForwardingEmail"`
	IsDomainConfigured     bool       `json:"isDomainConfigured"`
	DkimDnsRecord          *DnsRecord `json:"dkimDnsRecord"`
	ReturnPathDnsRecord    *DnsRecord `json:"returnPathDnsRecord"`
}

type WorkspaceEmailSettings struct {
	IsEnabled                    bool                          `json:"isEnabled"`
	WorkspaceEmailDomainSettings *WorkspaceEmailDomainSettings `json:"workspaceEmailDomainSettings,omitempty"`
	BccEmail                     *string                       `json:"bccEmail,omitempty"`
}

type WorkspaceInvite struct {
	Id string `json:"id"`
	// Who sent this invite.
	CreatedBy InternalActor `json:"createdBy"`
	// When the invite was created.
	CreatedAt *DateTime `json:"createdAt"`
	// The email that is being invited.
	Email string `json:"email"`
	// The workspace they are being invited to.
	Workspace *Workspace `json:"workspace"`
	// Whether the person has accepted the invite.
	IsAccepted bool `json:"isAccepted"`
	// The roles that the invite will assign on workspace joining.
	Roles []Role `json:"roles"`
	// Who updated this invite.
	UpdatedBy InternalActor `json:"updatedBy"`
	// When the invite was updated.
	UpdatedAt *DateTime `json:"updatedAt"`
}

type WorkspaceInviteConnection struct {
	Edges    []WorkspaceInviteEdge `json:"edges"`
	PageInfo *PageInfo             `json:"pageInfo"`
}

type WorkspaceInviteEdge struct {
	Cursor string           `json:"cursor"`
	Node   *WorkspaceInvite `json:"node"`
}

type WorkspaceSlackInstallationInfo struct {
	InstallationUrl string `json:"installationUrl"`
}

type WorkspaceSlackIntegration struct {
	IntegrationId       string        `json:"integrationId"`
	SlackChannelName    string        `json:"slackChannelName"`
	SlackTeamName       string        `json:"slackTeamName"`
	IsReinstallRequired bool          `json:"isReinstallRequired"`
	CreatedAt           *DateTime     `json:"createdAt"`
	CreatedBy           InternalActor `json:"createdBy"`
	UpdatedAt           *DateTime     `json:"updatedAt"`
	UpdatedBy           InternalActor `json:"updatedBy"`
}

type WorkspaceSlackIntegrationConnection struct {
	Edges    []WorkspaceSlackIntegrationEdge `json:"edges"`
	PageInfo *PageInfo                       `json:"pageInfo"`
}

type WorkspaceSlackIntegrationEdge struct {
	Cursor string                     `json:"cursor"`
	Node   *WorkspaceSlackIntegration `json:"node"`
}

func UpsertCustomTimelineEntry(client *gqlclient.Client, ctx context.Context, input UpsertCustomTimelineEntryInput) (upsertCustomTimelineEntry *UpsertCustomTimelineEntryOutput, err error) {
	op := gqlclient.NewOperation("mutation upsertCustomTimelineEntry ($input: UpsertCustomTimelineEntryInput!) {\n\tupsertCustomTimelineEntry(input: $input) {\n\t\tresult\n\t\ttimelineEntry {\n\t\t\tid\n\t\t\tcustomerId\n\t\t\ttimestamp {\n\t\t\t\tiso8601\n\t\t\t}\n\t\t\tentry {\n\t\t\t\t... on CustomEntry {\n\t\t\t\t\ttitle\n\t\t\t\t\tcomponents {\n\t\t\t\t\t\t... on ComponentText {\n\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\ttext\n\t\t\t\t\t\t\ttextSize\n\t\t\t\t\t\t\ttextColor\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ComponentSpacer {\n\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\tspacerSize\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ComponentDivider {\n\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\tspacingSize\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ComponentLinkButton {\n\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tactor {\n\t\t\t\t... on MachineUserActor {\n\t\t\t\t\tmachineUser {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tfullName\n\t\t\t\t\t\tpublicName\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\terror {\n\t\t\tmessage\n\t\t\ttype\n\t\t\tcode\n\t\t\tfields {\n\t\t\t\tfield\n\t\t\t\tmessage\n\t\t\t\ttype\n\t\t\t}\n\t\t}\n\t}\n}\n")
	op.Var("input", input)
	var respData struct {
		UpsertCustomTimelineEntry *UpsertCustomTimelineEntryOutput
	}
	err = client.Execute(ctx, op, &respData)
	return respData.UpsertCustomTimelineEntry, err
}

func UpsertCustomer(client *gqlclient.Client, ctx context.Context, input UpsertCustomerInput) (upsertCustomer *UpsertCustomerOutput, err error) {
	op := gqlclient.NewOperation("mutation upsertCustomer ($input: UpsertCustomerInput!) {\n\tupsertCustomer(input: $input) {\n\t\tresult\n\t\tcustomer {\n\t\t\tid\n\t\t\texternalId\n\t\t\tshortName\n\t\t\tfullName\n\t\t\temail {\n\t\t\t\temail\n\t\t\t\tisVerified\n\t\t\t}\n\t\t\tstatus\n\t\t}\n\t\terror {\n\t\t\tmessage\n\t\t\ttype\n\t\t\tcode\n\t\t\tfields {\n\t\t\t\tfield\n\t\t\t\tmessage\n\t\t\t\ttype\n\t\t\t}\n\t\t}\n\t}\n}\n")
	op.Var("input", input)
	var respData struct {
		UpsertCustomer *UpsertCustomerOutput
	}
	err = client.Execute(ctx, op, &respData)
	return respData.UpsertCustomer, err
}
